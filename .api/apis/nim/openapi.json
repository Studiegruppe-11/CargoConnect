{
  "openapi": "3.1.0",
  "info": {
    "title": "Route Optimization",
    "description": "The NVIDIA cuOpt REST API for cuOpt-24.03",
    "version": "24.03",
    "termsOfService": "https://nvidia.com/legal/terms-of-use",
    "contact": {
      "name": "NVIDIA Support",
      "url": "https://help.nvidia.com/"
    },
    "license": {
      "name": "NVIDIA cuOpt License and Usage Agreement",
      "url": "https://www.nvidia.com/en-us/data-center/products/nvidia-ai-enterprise/eula/"
    }
  },
  "servers": [
    {
      "url": "optimize.api.nvidia.com/v1"
    }
  ],
  "tags": [
    {
      "name": "nvidia / cuOpt",
      "description": "an accelerated optimization API for complex, real-time fleet routing workflows"
    }
  ],
  "paths": {
    "/nvidia/cuopt": {
      "post": {
        "tags": [
          "nvidia / cuOpt"
        ],
        "summary": "Submit to solver",
        "description": "Note: This is for managed service. Takes all the data and options at once, solves the routing problem and returns result.  This POST should be used in conjunction with the NVCF API which allows for the upload of large assets. \nYou can find details on how to use NVCF Asset APIs here: https://docs.api.nvidia.com/cloud-functions/reference/createasset",
        "operationId": "nvidia-cuopt-infer",
        "parameters": [
          {
            "in": "header",
            "name": "NVCF-INPUT-ASSET-REFERENCES",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "String of asset IDs separated by commas. Data is uploaded to AWS S3 using NVCF Asset APIs and associated with these asset IDs.If the size of the json is more than 200KB, it needs to be uploaded to a presigned S3 URL bucket. The presigned URL allows for secure and temporary access to the S3 bucket for uploading the image. Once the asset is requested, an asset ID is generated for it. Please include this asset ID in this header and to use the uploaded json the 'data' field in the request body should be null; otherwise, it will be ignored."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "cuOpt_OptimizedRouting",
                          "cuOpt_RoutingValidator",
                          0
                        ]
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Action",
                    "description": "Action to be performed by the service, validator action just validates input against format and base rules.",
                    "default": "cuOpt_OptimizedRouting"
                  },
                  "data": {
                    "anyOf": [
                      {
                        "properties": {
                          "cost_waypoint_graph_data": {
                            "anyOf": [
                              {
                                "properties": {
                                  "waypoint_graph": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Edges",
                                              "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                                            },
                                            "offsets": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Offsets",
                                              "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                                            },
                                            "weights": {
                                              "anyOf": [
                                                {
                                                  "items": {
                                                    "type": "number"
                                                  },
                                                  "type": "array"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ],
                                              "title": "Weights",
                                              "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "edges",
                                            "offsets"
                                          ],
                                          "title": "WaypointGraph"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Waypoint Graph"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "UpdateWaypointGraphData"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Waypoint graph with weights as cost to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
                            "default": {},
                            "examples": [
                              null
                            ]
                          },
                          "travel_time_waypoint_graph_data": {
                            "anyOf": [
                              {
                                "properties": {
                                  "waypoint_graph": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "properties": {
                                            "edges": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Edges",
                                              "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                                            },
                                            "offsets": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Offsets",
                                              "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                                            },
                                            "weights": {
                                              "anyOf": [
                                                {
                                                  "items": {
                                                    "type": "number"
                                                  },
                                                  "type": "array"
                                                },
                                                {
                                                  "type": "null"
                                                }
                                              ],
                                              "title": "Weights",
                                              "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "edges",
                                            "offsets"
                                          ],
                                          "title": "WaypointGraph"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Waypoint Graph"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "UpdateWaypointGraphData"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Waypoint graph with weights as time to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
                            "default": {},
                            "examples": [
                              null
                            ]
                          },
                          "cost_matrix_data": {
                            "anyOf": [
                              {
                                "properties": {
                                  "data": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "items": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Data",
                                    "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                                  },
                                  "cost_matrix": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "items": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Cost Matrix",
                                    "description": "This field is deprecated, please use the 'data' field instead",
                                    "deprecated": true
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "UpdateCostMatrices"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Sqaure matrix with cost to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]",
                            "default": {},
                            "examples": [
                              {
                                "cost_matrix": {
                                  "1": [
                                    [
                                      0,
                                      1,
                                      1
                                    ],
                                    [
                                      1,
                                      0,
                                      1
                                    ],
                                    [
                                      1,
                                      1,
                                      0
                                    ]
                                  ],
                                  "2": [
                                    [
                                      0,
                                      1,
                                      1
                                    ],
                                    [
                                      1,
                                      0,
                                      1
                                    ],
                                    [
                                      1,
                                      2,
                                      0
                                    ]
                                  ]
                                }
                              }
                            ]
                          },
                          "travel_time_matrix_data": {
                            "anyOf": [
                              {
                                "properties": {
                                  "data": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "items": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Data",
                                    "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                                  },
                                  "cost_matrix": {
                                    "anyOf": [
                                      {
                                        "additionalProperties": {
                                          "items": {
                                            "items": {
                                              "type": "number"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Cost Matrix",
                                    "description": "This field is deprecated, please use the 'data' field instead",
                                    "deprecated": true
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "UpdateCostMatrices"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Sqaure matrix with time to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ntravel time matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is time matrix. Value of \nvehicle type should be within [0, 255]",
                            "default": {},
                            "examples": [
                              {
                                "cost_matrix": {
                                  "1": [
                                    [
                                      0,
                                      1,
                                      1
                                    ],
                                    [
                                      1,
                                      0,
                                      1
                                    ],
                                    [
                                      1,
                                      1,
                                      0
                                    ]
                                  ],
                                  "2": [
                                    [
                                      0,
                                      1,
                                      1
                                    ],
                                    [
                                      1,
                                      0,
                                      1
                                    ],
                                    [
                                      1,
                                      2,
                                      0
                                    ]
                                  ]
                                }
                              }
                            ]
                          },
                          "fleet_data": {
                            "allOf": [
                              {
                                "properties": {
                                  "vehicle_locations": {
                                    "items": {
                                      "items": {
                                        "type": "integer"
                                      },
                                      "type": "array"
                                    },
                                    "type": "array",
                                    "title": "Vehicle Locations",
                                    "description": "dtype: int32, vehicle_location >= 0. \n\n Start and end location of the vehicles in the given set of locations in WayPointGraph or CostMatrices.\nExample: For 2 vehicles,  \n\n     [ \n\n         [veh_1_start_loc, veh_1_end_loc], \n\n         [veh_2_start_loc, veh_2_end_loc] \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          0,
                                          0
                                        ],
                                        [
                                          0,
                                          0
                                        ]
                                      ]
                                    ]
                                  },
                                  "vehicle_ids": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Ids",
                                    "description": "List of the vehicle ids or names provided as a string.",
                                    "examples": [
                                      [
                                        "veh-1",
                                        "veh-2"
                                      ]
                                    ]
                                  },
                                  "capacities": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Capacities",
                                    "description": "dtype: int32, capacity >= 0. \n\n Note: For this release number of capacity dimensions are limited to 3. \n\n Lists of capacities of each vehicle.\nMultiple capacities can be added and each list will represent one kind of capacity. Order of kind of the capacities should match order of the demands.\nTotal capacity for each type should be sufficient to complete all demand of that type.Example: In case of two sets of capacities per vehicle with 3 vehicles,  \n\n     [ \n\n         [cap_1_veh_1, cap_1_veh_2, cap_1_veh_3], \n\n         [cap_2_veh_1, cap_2_veh_2, cap_2_veh_3] \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          2,
                                          2
                                        ],
                                        [
                                          4,
                                          1
                                        ]
                                      ]
                                    ]
                                  },
                                  "vehicle_time_windows": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Time Windows",
                                    "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time window pairs for each vehicle,\nfor example the data would look as follows for 2 vehicles, \n \n\n     [ \n\n         [veh_1_earliest, veh_1_latest], \n\n         [veh_2_earliest, veh_2_latest] \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          0,
                                          10
                                        ],
                                        [
                                          0,
                                          10
                                        ]
                                      ]
                                    ]
                                  },
                                  "vehicle_break_time_windows": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "items": {
                                              "type": "integer"
                                            },
                                            "type": "array"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Break Time Windows",
                                    "description": "dtype: int32, time >= 0. \n\n Multiple break time windows can be added for each vehicle.Earliest and Latest break time window pairs for each vehicle,\nFor example, in case of 2 sets of breaks for each vehicle which translates to 2 dimensions of breaks,\n \n\n     [ \n\n         [[brk_1_veh_1_earliest, brk_1_veh_1_latest], [brk_1_veh_2_earliest, brk_1_veh_2_latest]] \n\n         [[brk_2_veh_1_earliest, brk_2_veh_1_latest], [brk_2_veh_2_earliest, brk_2_veh_2_latest]] \n\n     ] \n\n The break duration within this time window is provided through vehicle_break_durations.",
                                    "examples": [
                                      [
                                        [
                                          [
                                            1,
                                            2
                                          ],
                                          [
                                            2,
                                            3
                                          ]
                                        ]
                                      ]
                                    ]
                                  },
                                  "vehicle_break_durations": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Break Durations",
                                    "description": "dtype: int32, time >= 0. \n\n Break duration for each vehicle. vehicle_break_time_windows should be provided to use this option.For example, in case of having 2 breaks for each vehicle,  \n\n     [ \n\n         [brk_1_veh_1_duration, brk_1_veh_2_duration], \n\n         [brk_2_veh_1_duration, brk_2_veh_2_duration], \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          1,
                                          1
                                        ]
                                      ]
                                    ]
                                  },
                                  "vehicle_break_locations": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Break Locations",
                                    "description": "dtype: int32, location >= 0. \n\n Break location where vehicles can take breaks. If not set, any location can be used for the break.",
                                    "examples": [
                                      [
                                        0,
                                        1
                                      ]
                                    ]
                                  },
                                  "vehicle_types": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Types",
                                    "description": "dtype: uint8. \n\n Types of vehicles in the fleet given as positive integers.",
                                    "examples": [
                                      [
                                        1,
                                        2
                                      ]
                                    ]
                                  },
                                  "vehicle_order_match": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "properties": {
                                            "vehicle_id": {
                                              "type": "integer",
                                              "title": "Vehicle Id",
                                              "description": "dtype: int32, vehicle_id >= 0. \n\n Vehicle id as an integer, and can serve all the order listed in order_ids."
                                            },
                                            "order_ids": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Order Ids",
                                              "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicle"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "vehicle_id",
                                            "order_ids"
                                          ],
                                          "title": "VehicleOrderMatch"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Order Match",
                                    "description": "A list of vehicle order match, where the match would contain a vehicle id and a list of orders that vehicle can serve.",
                                    "examples": [
                                      [
                                        {
                                          "order_ids": [
                                            0
                                          ],
                                          "vehicle_id": 0
                                        },
                                        {
                                          "order_ids": [
                                            1
                                          ],
                                          "vehicle_id": 1
                                        }
                                      ]
                                    ]
                                  },
                                  "skip_first_trips": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "boolean"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Skip First Trips",
                                    "description": "Drop the cost of trip to first location for that vehicle.",
                                    "examples": [
                                      [
                                        true,
                                        false
                                      ]
                                    ]
                                  },
                                  "drop_return_trips": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "boolean"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Drop Return Trips",
                                    "description": "Drop cost of return trip for each vehicle.",
                                    "examples": [
                                      [
                                        true,
                                        false
                                      ]
                                    ]
                                  },
                                  "min_vehicles": {
                                    "anyOf": [
                                      {
                                        "type": "integer"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Min Vehicles",
                                    "description": "dtype: int32, min_vehicles >= 1. \n\n Solution should consider minimum number of vehicles",
                                    "examples": [
                                      2
                                    ]
                                  },
                                  "vehicle_max_costs": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Max Costs",
                                    "description": "dtype: float32, max_costs >= 0. \n\n Maximum cost a vehicle can incur and it is based on cost matrix/cost waypoint graph.",
                                    "examples": [
                                      [
                                        7,
                                        10
                                      ]
                                    ]
                                  },
                                  "vehicle_max_times": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Max Times",
                                    "description": "dtype: float32, max_time >= 0. \n\n Maximum time a vehicle can operate (includes drive, service and wait time), this is based on travel time matrix/travel time waypoint graph.",
                                    "examples": [
                                      [
                                        7,
                                        10
                                      ]
                                    ]
                                  },
                                  "vehicle_fixed_costs": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Fixed Costs",
                                    "description": "dtype: float32, fixed_cost >= 0. \n\n Cost of each vehicle.This helps in routing where may be 2 vehicles with less cost is effective compared to 1 vehicle with huge cost. As example shows veh-0 (15) > veh-1 (5) + veh-2 (5)",
                                    "examples": [
                                      [
                                        15,
                                        5
                                      ]
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "vehicle_locations"
                                ],
                                "title": "FleetData"
                              }
                            ],
                            "description": "All Fleet information"
                          },
                          "task_data": {
                            "allOf": [
                              {
                                "properties": {
                                  "task_locations": {
                                    "items": {
                                      "type": "integer"
                                    },
                                    "type": "array",
                                    "title": "Task Locations",
                                    "description": "dtype: int32, location >= 0. \n\n Location where the task has been requested.",
                                    "examples": [
                                      [
                                        1,
                                        2
                                      ]
                                    ]
                                  },
                                  "task_ids": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Task Ids",
                                    "description": "List of the task ids or names provided as a string.",
                                    "examples": [
                                      [
                                        "Task-A",
                                        "Task-B"
                                      ]
                                    ]
                                  },
                                  "demand": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Demand",
                                    "description": "dtype: int32 \n\n Note: For this release number of demand dimensions are limited to 3. \n\n Lists of demands of each tasks.\nMultiple demands can be added and each list represents one kind of demand. Order of these demands should match the type of vehicle capacities provided.Example: In case of two sets of demands per vehicle with 3 vehicles,  \n\n     [ \n\n         [dem_1_tsk_1, dem_1_tsk_2, dem_1_tsk_3], \n\n         [dem_2_tsk_1, dem_2_tsk_2, dem_2_tsk_3] \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          1,
                                          1
                                        ],
                                        [
                                          3,
                                          1
                                        ]
                                      ]
                                    ]
                                  },
                                  "pickup_and_delivery_pairs": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Pickup And Delivery Pairs",
                                    "description": "dtype: int32, pairs >= 0. \n\n List of Pick-up and delivery index pairs from task locations.\nIn case we have the following pick-up and delivery locations, 2->1, 4->5, 3->4, then task locations would look something like, task_locations = [0, 2, 1, 4, 5, 3, 4] and pick-up and delivery pairs would be index of those locations in task location and would look like [[1, 2], [3, 4], [5, 6]], 1 is pickup index for location 2 and it should be delivered to location 1 which is at index 2.Example schema:  \n\n     [ \n\n         [pcikup_1_idx_to_task, drop_1_idx_to_task], \n\n         [pcikup_2_idx_to_task, drop_2_idx_to_task], \n\n     ]",
                                    "examples": [
                                      null
                                    ]
                                  },
                                  "task_time_windows": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Task Time Windows",
                                    "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time windows for each tasks.\nFor example the data would look as follows, \n \n\n     [ \n\n         [tsk_1_earliest, tsk_1_latest], \n\n         [tsk_2_earliest, tsk_2_latest] \n\n     ]",
                                    "examples": [
                                      [
                                        [
                                          0,
                                          5
                                        ],
                                        [
                                          3,
                                          9
                                        ]
                                      ]
                                    ]
                                  },
                                  "service_times": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "additionalProperties": {
                                          "items": {
                                            "type": "integer"
                                          },
                                          "type": "array"
                                        },
                                        "type": "object"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Service Times",
                                    "description": "dtype: int32, time >= 0. \n\n Service time for each task. Accepts a list of service times for all vehicles. In case of vehicle specific service times, accepts a dict with key as vehicle id and value as list of service times.Example schema: In case all vehicles have same service times,  \n\n     [tsk_1_srv_time, tsk_2_srv_time, tsk_3_srv_time] \n\n  \n\n In case, there are 2 types of vehicle types and each of them have different service times, \n\n     { \n\n         type-1: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time], \n\n         type-2: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time] \n\n     }",
                                    "examples": [
                                      [
                                        0,
                                        0
                                      ]
                                    ]
                                  },
                                  "prizes": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "number"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Prizes",
                                    "description": "dtype: float32, prizes >= 0. \n\n List of values which signifies prizes that are collected for fulfilling each task. This can be used effectively in case solution is infeasible and need to drop few tasks to get feasible solution. Solver will prioritize for higher prize tasks ",
                                    "examples": [
                                      null
                                    ]
                                  },
                                  "order_vehicle_match": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "properties": {
                                            "order_id": {
                                              "type": "integer",
                                              "title": "Order Id",
                                              "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicleOrder id as an integer"
                                            },
                                            "vehicle_ids": {
                                              "items": {
                                                "type": "integer"
                                              },
                                              "type": "array",
                                              "title": "Vehicle Ids",
                                              "description": "dtype: int32, vehicle_id >= 0. \n\n Indices of the vehicles which can serve this particular order. \n"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "order_id",
                                            "vehicle_ids"
                                          ],
                                          "title": "OrderVehicleMatch"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Order Vehicle Match",
                                    "description": "A list of order vehicle match, where the match would contain a order id and a list of vehicle ids that can serve this order.",
                                    "examples": [
                                      [
                                        {
                                          "order_id": 0,
                                          "vehicle_ids": [
                                            0
                                          ]
                                        },
                                        {
                                          "order_id": 1,
                                          "vehicle_ids": [
                                            1
                                          ]
                                        }
                                      ]
                                    ]
                                  },
                                  "mandatory_task_ids": {
                                    "anyOf": [
                                      {
                                        "items": {
                                          "type": "integer"
                                        },
                                        "type": "array"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Mandatory Task Ids",
                                    "description": "dtype: int32, mandatory_task_id >= 0. \n\n Note: This is only effective when used along with drop infeasible option. \n\n A list of task ids which are mandatory and solver would fail if these cannot be fulfilled.",
                                    "examples": [
                                      null
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "task_locations"
                                ],
                                "title": "TaskData"
                              }
                            ],
                            "description": "All Task information"
                          },
                          "solver_config": {
                            "anyOf": [
                              {
                                "properties": {
                                  "time_limit": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Time Limit",
                                    "description": "SolverSettings time limit",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "objectives": {
                                    "anyOf": [
                                      {
                                        "properties": {
                                          "cost": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Cost",
                                            "description": "dtype: float32.  \n\n The weight assigned to minimizing the cost for a given solution, default value is 1",
                                            "examples": [
                                              1
                                            ]
                                          },
                                          "travel_time": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Travel Time",
                                            "description": "dtype: float32. \n\n The weight assigned to minimizing total travel time for a given solution (includes drive, service and wait time)",
                                            "examples": [
                                              0
                                            ]
                                          },
                                          "variance_route_size": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Variance Route Size",
                                            "description": "dtype: float32. \n\n The weight assigned to the variance in the number of orders served by each route.",
                                            "examples": [
                                              0
                                            ]
                                          },
                                          "variance_route_service_time": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Variance Route Service Time",
                                            "description": "dtype: float32. \n\n The weight assigned to the variance in the accumulated service times of each route",
                                            "examples": [
                                              0
                                            ]
                                          },
                                          "prize": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Prize",
                                            "description": "dtype: float32. \n\n The weight assigned to the prize in accumulated prizes for each job fulfilled.This will be negated from overall values accumulated with other objectives.For example, if cost accumulated is 10 and objective value for it is 1, and if the prize accumulated is 3 and objective is 2, then total cost would look something like this 10 x 1 - 3 x 2 = 4.",
                                            "examples": [
                                              0
                                            ]
                                          },
                                          "vehicle_fixed_cost": {
                                            "anyOf": [
                                              {
                                                "type": "number"
                                              },
                                              {
                                                "type": "null"
                                              }
                                            ],
                                            "title": "Vehicle Fixed Cost",
                                            "description": "dtype: float32. \n\n The weight assigned to the accumulated fixed costs of each vehicle used in solution",
                                            "examples": [
                                              0
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "title": "Objective"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "description": "Values provided dictate the linear combination of factors used to evaluate solution quality.Only prize will be negated, all others gets accumulated. That's why sometime you might come across negative value as solution cost."
                                  },
                                  "config_file": {
                                    "anyOf": [
                                      {
                                        "type": "string"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Config File",
                                    "description": "Dump configuration information in a given file as yaml",
                                    "examples": [
                                      null
                                    ]
                                  },
                                  "verbose_mode": {
                                    "anyOf": [
                                      {
                                        "type": "boolean"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Verbose Mode",
                                    "description": "Displaying internal information during the solver execution.",
                                    "default": false
                                  },
                                  "error_logging": {
                                    "anyOf": [
                                      {
                                        "type": "boolean"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Error Logging",
                                    "description": "Displaying constraint error information during the solver execution.",
                                    "default": true
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "UpdateSolverSettingsConfig"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "fleet_data",
                          "task_data"
                        ],
                        "title": "OptimizedRoutingData"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Data",
                    "description": "The data that needs to be processed by the service. For detailed explanations of each field, please consult the following link: <a href=\"https://docs.nvidia.com/cuopt/service/latest/data-requirements.html\">data requirements</a> . To ensure best practices, please refer to: <a href=\"https://docs.nvidia.com/cuopt/service/latest/best-practices.html\">best practices</a>. For examples, you can find them at: <a href=\"https://github.com/NVIDIA/cuOpt-Resources/tree/branch-23.10/notebooks/routing/service\">notebooks</a>. If the size of the data exceeds 250KB, please utilize the large assets API to upload it to s3. In such cases, set the data as null and include the header NVCF-INPUT-ASSET-REFERENCES: $ASSET_ID in the POST request."
                  },
                  "parameters": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Parameters",
                    "description": "unused/ignored but retained for compatibility"
                  },
                  "client_version": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Client Version",
                    "description": "cuOpt client version. Set to 'custom' to skip version check.",
                    "default": ""
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "data"
                ],
                "title": "cuoptData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {},
                      "additionalProperties": false,
                      "type": "object",
                      "title": "EmptyDict"
                    },
                    {
                      "properties": {
                        "response": {
                          "anyOf": [
                            {
                              "properties": {
                                "solver_response": {
                                  "allOf": [
                                    {
                                      "properties": {
                                        "status": {
                                          "type": "integer",
                                          "title": "Status",
                                          "description": "0 - Solution is available \n1 - Infeasible solution is available \n",
                                          "default": 0,
                                          "examples": [
                                            0
                                          ]
                                        },
                                        "num_vehicles": {
                                          "type": "integer",
                                          "title": "Num Vehicles",
                                          "description": "Number of vehicle being used for the solution",
                                          "default": -1,
                                          "examples": [
                                            2
                                          ]
                                        },
                                        "solution_cost": {
                                          "type": "number",
                                          "title": "Solution Cost",
                                          "description": "Total cost of the solution",
                                          "default": -1,
                                          "examples": [
                                            2
                                          ]
                                        },
                                        "vehicle_data": {
                                          "additionalProperties": {
                                            "properties": {
                                              "task_id": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array",
                                                "title": "Task Id",
                                                "description": "task_ids being assigned to vehicle along with depot and breaks",
                                                "default": []
                                              },
                                              "arrival_stamp": {
                                                "items": {
                                                  "type": "number"
                                                },
                                                "type": "array",
                                                "title": "Arrival Stamp",
                                                "description": "arrival stamps at each task locations",
                                                "default": []
                                              },
                                              "route": {
                                                "items": {
                                                  "type": "integer"
                                                },
                                                "type": "array",
                                                "title": "Route",
                                                "description": "Route indices as per waypoint graph or cost matrix provided",
                                                "default": []
                                              },
                                              "type": {
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Depot",
                                                    "Pickup",
                                                    "Delivery",
                                                    "Break",
                                                    "w"
                                                  ],
                                                  "title": "LocationTypeEnum"
                                                },
                                                "type": "array",
                                                "title": "Type",
                                                "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                                                "default": []
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "title": "VehicleData"
                                          },
                                          "type": "object",
                                          "title": "Vehicle Data",
                                          "description": "All the details of vehicle routes and timestamps",
                                          "default": {},
                                          "examples": [
                                            {
                                              "vehicle_data": {
                                                "veh-1": {
                                                  "arrival_stamp": [
                                                    1,
                                                    2
                                                  ],
                                                  "route": [
                                                    1,
                                                    1
                                                  ],
                                                  "task_id": [
                                                    "Break",
                                                    "Task-A"
                                                  ],
                                                  "type": [
                                                    "Break",
                                                    "Delivery"
                                                  ]
                                                },
                                                "veh-2": {
                                                  "arrival_stamp": [
                                                    2,
                                                    2,
                                                    4,
                                                    5
                                                  ],
                                                  "route": [
                                                    0,
                                                    0,
                                                    2,
                                                    0
                                                  ],
                                                  "task_id": [
                                                    "Depot",
                                                    "Break",
                                                    "Task-B",
                                                    "Depot"
                                                  ],
                                                  "type": [
                                                    "Depot",
                                                    "Break",
                                                    "Delivery",
                                                    "Depot"
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "msg": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "title": "Msg",
                                          "description": "Any information pertaining to the run.",
                                          "default": ""
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "title": "FeasibleResultData"
                                    }
                                  ],
                                  "description": "Feasible solution",
                                  "default": {
                                    "status": 0,
                                    "num_vehicles": -1,
                                    "solution_cost": -1,
                                    "vehicle_data": {},
                                    "msg": ""
                                  }
                                },
                                "perf_times": {
                                  "anyOf": [
                                    {
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Perf Times",
                                  "description": "Etl and Solve times of the solve call"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "title": "FeasibleSolve"
                            },
                            {
                              "properties": {
                                "solver_infeasible_response": {
                                  "allOf": [
                                    {
                                      "properties": {
                                        "status": {
                                          "type": "integer",
                                          "title": "Status",
                                          "description": "1 - Infeasible solution is available \n",
                                          "default": 1,
                                          "examples": [
                                            1
                                          ]
                                        },
                                        "num_vehicles": {
                                          "type": "integer",
                                          "title": "Num Vehicles",
                                          "description": "Number of vehicle being used for the solution",
                                          "default": -1,
                                          "examples": [
                                            2
                                          ]
                                        },
                                        "solution_cost": {
                                          "type": "number",
                                          "title": "Solution Cost",
                                          "description": "Total cost of the solution",
                                          "default": -1,
                                          "examples": [
                                            2
                                          ]
                                        },
                                        "vehicle_data": {
                                          "additionalProperties": {
                                            "properties": {
                                              "task_id": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array",
                                                "title": "Task Id",
                                                "description": "task_ids being assigned to vehicle along with depot and breaks",
                                                "default": []
                                              },
                                              "arrival_stamp": {
                                                "items": {
                                                  "type": "number"
                                                },
                                                "type": "array",
                                                "title": "Arrival Stamp",
                                                "description": "arrival stamps at each task locations",
                                                "default": []
                                              },
                                              "route": {
                                                "items": {
                                                  "type": "integer"
                                                },
                                                "type": "array",
                                                "title": "Route",
                                                "description": "Route indices as per waypoint graph or cost matrix provided",
                                                "default": []
                                              },
                                              "type": {
                                                "items": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Depot",
                                                    "Pickup",
                                                    "Delivery",
                                                    "Break",
                                                    "w"
                                                  ],
                                                  "title": "LocationTypeEnum"
                                                },
                                                "type": "array",
                                                "title": "Type",
                                                "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                                                "default": []
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "title": "VehicleData"
                                          },
                                          "type": "object",
                                          "title": "Vehicle Data",
                                          "description": "All the details of vehicle routes and timestamps",
                                          "default": {},
                                          "examples": [
                                            {
                                              "vehicle_data": {
                                                "veh-1": {
                                                  "arrival_stamp": [
                                                    1,
                                                    2
                                                  ],
                                                  "route": [
                                                    1,
                                                    1
                                                  ],
                                                  "task_id": [
                                                    "Break",
                                                    "Task-A"
                                                  ],
                                                  "type": [
                                                    "Break",
                                                    "Delivery"
                                                  ]
                                                },
                                                "veh-2": {
                                                  "arrival_stamp": [
                                                    2,
                                                    2,
                                                    4,
                                                    5
                                                  ],
                                                  "route": [
                                                    0,
                                                    0,
                                                    2,
                                                    0
                                                  ],
                                                  "task_id": [
                                                    "Depot",
                                                    "Break",
                                                    "Task-B",
                                                    "Depot"
                                                  ],
                                                  "type": [
                                                    "Depot",
                                                    "Break",
                                                    "Delivery",
                                                    "Depot"
                                                  ]
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "msg": {
                                          "anyOf": [
                                            {
                                              "type": "string"
                                            },
                                            {
                                              "type": "null"
                                            }
                                          ],
                                          "title": "Msg",
                                          "description": "Any information pertaining to the run.",
                                          "default": ""
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "title": "InfeasibleResultData"
                                    }
                                  ],
                                  "description": "Infeasible solution, this can mean the problem itself is infeasible or solver requires more time to find a solution. Setting default solve time is suggested in case you are not aware of the expected time.",
                                  "default": {
                                    "status": 1,
                                    "num_vehicles": -1,
                                    "solution_cost": -1,
                                    "vehicle_data": {},
                                    "msg": ""
                                  }
                                },
                                "perf_times": {
                                  "anyOf": [
                                    {
                                      "type": "object"
                                    },
                                    {
                                      "type": "null"
                                    }
                                  ],
                                  "title": "Perf Times",
                                  "description": "Etl and Solve times of the solve call"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "title": "InFeasibleSolve"
                            }
                          ],
                          "title": "Response",
                          "description": "Response"
                        },
                        "warnings": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "title": "Warnings",
                          "description": "List of warnings for users to handle issues",
                          "default": []
                        },
                        "notes": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "title": "Notes",
                          "description": "Any notes for users",
                          "default": []
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "response"
                      ],
                      "title": "ResponseModel"
                    }
                  ],
                  "title": "Response Cuopt Cuopt Cuopt Post"
                }
              }
            }
          },
          "202": {
            "description": "Result is pending. Client should poll using the requestId.\n",
            "content": {
              "application/json": {
                "example": {},
                "schema": {}
              }
            },
            "headers": {
              "NVCF-REQID": {
                "description": "requestId required for pooling",
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "maxLength": 36
                }
              },
              "NVCF-STATUS": {
                "description": "Invocation status",
                "schema": {
                  "type": "string",
                  "format": "^[a-zA-Z-]{1,64}$",
                  "maxLength": 64
                }
              }
            }
          },
          "400": {
            "description": "Value Error Or Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "detail": {
                      "type": "string",
                      "title": "Detail",
                      "description": "Error details"
                    }
                  },
                  "type": "object",
                  "required": [
                    "detail"
                  ],
                  "title": "DetailModel"
                }
              }
            }
          },
          "409": {
            "description": "Failed to get route",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "detail": {
                      "type": "string",
                      "title": "Detail",
                      "description": "Error details"
                    }
                  },
                  "type": "object",
                  "required": [
                    "detail"
                  ],
                  "title": "DetailModel"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity or Runtime Error or Out of memory error",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "detail": {
                      "type": "string",
                      "title": "Detail",
                      "description": "Error details"
                    }
                  },
                  "type": "object",
                  "required": [
                    "detail"
                  ],
                  "title": "DetailModel"
                }
              }
            }
          },
          "500": {
            "description": "Any uncaught cuOpt error or Server errors",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "detail": {
                      "type": "string",
                      "title": "Detail",
                      "description": "Error details"
                    }
                  },
                  "type": "object",
                  "required": [
                    "detail"
                  ],
                  "title": "DetailModel"
                }
              }
            }
          }
        },
        "x-nvai-meta": {
          "name": "VRP examples",
          "returns": "Returns a json reponse with vehicle routing details.",
          "path": "route",
          "examples": [
            {
              "name": "VRP problem",
              "requestJson": "{\"action\":\"cuOpt_OptimizedRouting\",\"data\":{\"cost_waypoint_graph_data\":null,\"travel_time_waypoint_graph_data\":null,\"cost_matrix_data\":{\"data\":{\"1\":[[0,1,1],[1,0,1],[1,1,0]],\"2\":[[0,1,1],[1,0,1],[1,2,0]]}},\"travel_time_matrix_data\":{\"data\":{\"1\":[[0,1,1],[1,0,1],[1,1,0]],\"2\":[[0,1,1],[1,0,1],[1,2,0]]}},\"fleet_data\":{\"vehicle_locations\":[[0,0],[0,0]],\"vehicle_ids\":[\"veh-1\",\"veh-2\"],\"capacities\":[[2,2],[4,1]],\"vehicle_time_windows\":[[0,10],[0,10]],\"vehicle_break_time_windows\":[[[1,2],[2,3]]],\"vehicle_break_durations\":[[1,1]],\"vehicle_break_locations\":[0,1],\"vehicle_types\":[1,2],\"vehicle_order_match\":[{\"order_ids\":[0],\"vehicle_id\":0},{\"order_ids\":[1],\"vehicle_id\":1}],\"skip_first_trips\":[true,false],\"drop_return_trips\":[true,false],\"min_vehicles\":2,\"vehicle_max_costs\":[7,10],\"vehicle_max_times\":[7,10]},\"task_data\":{\"task_locations\":[1,2],\"task_ids\":[\"Task-A\",\"Task-B\"],\"demand\":[[1,1],[3,1]],\"task_time_windows\":[[0,5],[3,9]],\"service_times\":[0,0],\"order_vehicle_match\":[{\"order_id\":0,\"vehicle_ids\":[0]},{\"order_id\":1,\"vehicle_ids\":[1]}]},\"solver_config\":{\"time_limit\":1,\"objectives\":{\"cost\":1,\"travel_time\":0,\"variance_route_size\":0,\"variance_route_service_time\":0,\"prize\":0},\"verbose_mode\":false,\"error_logging\":true}},\"client_version\":\"\"}",
              "responseJson": "{\"response\":{\"solver_response\":{\"status\":0,\"num_vehicles\":2,\"solution_cost\":2,\"vehicle_data\":{\"veh-1\":{\"task_id\":[\"Break\",\"Task-A\"],\"arrival_stamp\":[1,2],\"route\":[1,1],\"type\":[\"Break\",\"Delivery\"]},\"veh-2\":{\"task_id\":[\"Depot\",\"Break\",\"Task-B\",\"Depot\"],\"arrival_stamp\":[2,2,4,5],\"route\":[0,0,2,0],\"type\":[\"Depot\",\"Break\",\"Delivery\",\"Depot\"]}},\"msg\":\"\",\"perf_times\":{\"etl_time\":0.008506059646606445,\"solver_run_time\":0.5540950298309326}}},\"warnings\":[],\"notes\":[]}"
            }
          ],
          "templates": [
            {
              "title": "Examples",
              "requestEjs": {
                "python": "import requests\n\ninvoke_url = \"https://optimize.api.nvidia.com/v1/nvidia/cuopt\"\nfetch_url_format = \"https://optimize.api.nvidia.com/v1/status/\"\n\nheaders = {\n    \"Authorization\": \"Bearer $API_KEY_REQUIRED_IF_EXECUTING_OUTSIDE_NGC\",\n    \"Accept\": \"application/json\",\n}\n\npayload = {\n  \"action\": \"cuOpt_OptimizedRouting\",\n  \"data\": {\n    \"cost_waypoint_graph_data\": None,\n    \"travel_time_waypoint_graph_data\": None,\n    \"cost_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"travel_time_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"fleet_data\": {\n      \"vehicle_locations\": [\n        [\n          0,\n          0\n        ],\n        [\n          0,\n          0\n        ]\n      ],\n      \"vehicle_ids\": [\n        \"veh-1\",\n        \"veh-2\"\n      ],\n      \"capacities\": [\n        [\n          2,\n          2\n        ],\n        [\n          4,\n          1\n        ]\n      ],\n      \"vehicle_time_windows\": [\n        [\n          0,\n          10\n        ],\n        [\n          0,\n          10\n        ]\n      ],\n      \"vehicle_break_time_windows\": [\n        [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      ],\n      \"vehicle_break_durations\": [\n        [\n          1,\n          1\n        ]\n      ],\n      \"vehicle_break_locations\": [\n        0,\n        1\n      ],\n      \"vehicle_types\": [\n        1,\n        2\n      ],\n      \"vehicle_order_match\": [\n        {\n          \"order_ids\": [\n            0\n          ],\n          \"vehicle_id\": 0\n        },\n        {\n          \"order_ids\": [\n            1\n          ],\n          \"vehicle_id\": 1\n        }\n      ],\n      \"skip_first_trips\": [\n        true,\n        false\n      ],\n      \"drop_return_trips\": [\n        true,\n        false\n      ],\n      \"min_vehicles\": 2,\n      \"vehicle_max_costs\": [\n        7,\n        10\n      ],\n      \"vehicle_max_times\": [\n        7,\n        10\n      ]\n    },\n    \"task_data\": {\n      \"task_locations\": [\n        1,\n        2\n      ],\n      \"task_ids\": [\n        \"Task-A\",\n        \"Task-B\"\n      ],\n      \"demand\": [\n        [\n          1,\n          1\n        ],\n        [\n          3,\n          1\n        ]\n      ],\n      \"task_time_windows\": [\n        [\n          0,\n          5\n        ],\n        [\n          3,\n          9\n        ]\n      ],\n      \"service_times\": [\n        0,\n        0\n      ],\n      \"order_vehicle_match\": [\n        {\n          \"order_id\": 0,\n          \"vehicle_ids\": [\n            0\n          ]\n        },\n        {\n          \"order_id\": 1,\n          \"vehicle_ids\": [\n            1\n          ]\n        }\n      ]\n    },\n    \"solver_config\": {\n      \"time_limit\": 1,\n      \"objectives\": {\n        \"cost\": 1,\n        \"travel_time\": 0,\n        \"variance_route_size\": 0,\n        \"variance_route_service_time\": 0,\n        \"prize\": 0\n      },\n      \"verbose_mode\": False,\n      \"error_logging\": True\n    }\n  },\n  \"client_version\": \"\"\n}\n\n# re-use connections\nsession = requests.Session()\n\nresponse = session.post(invoke_url, headers=headers, json=payload)\n\nwhile response.status_code == 202:\n    request_id = response.headers.get(\"NVCF-REQID\")\n    fetch_url = fetch_url_format + request_id\n    response = session.get(fetch_url, headers=headers)\n\nresponse.raise_for_status()\nresponse_body = response.json()\nprint(response_body)\n",
                "node.js": "import fetch from \"node-fetch\";\n\nconst invokeUrl = \"https://optimize.api.nvidia.com/v1/nvidia/cuopt\"\nconst fetchUrlFormat = \"https://optimize.api.nvidia.com/v1/status/\"\n\nconst headers = {\n    \"Authorization\": \"Bearer $API_KEY_REQUIRED_IF_EXECUTING_OUTSIDE_NGC\",\n    \"Accept\": \"application/json\",\n}\n\nconst payload = {\n  \"action\": \"cuOpt_OptimizedRouting\",\n  \"data\": {\n    \"cost_waypoint_graph_data\": null,\n    \"travel_time_waypoint_graph_data\": null,\n    \"cost_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"travel_time_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"fleet_data\": {\n      \"vehicle_locations\": [\n        [\n          0,\n          0\n        ],\n        [\n          0,\n          0\n        ]\n      ],\n      \"vehicle_ids\": [\n        \"veh-1\",\n        \"veh-2\"\n      ],\n      \"capacities\": [\n        [\n          2,\n          2\n        ],\n        [\n          4,\n          1\n        ]\n      ],\n      \"vehicle_time_windows\": [\n        [\n          0,\n          10\n        ],\n        [\n          0,\n          10\n        ]\n      ],\n      \"vehicle_break_time_windows\": [\n        [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      ],\n      \"vehicle_break_durations\": [\n        [\n          1,\n          1\n        ]\n      ],\n      \"vehicle_break_locations\": [\n        0,\n        1\n      ],\n      \"vehicle_types\": [\n        1,\n        2\n      ],\n      \"vehicle_order_match\": [\n        {\n          \"order_ids\": [\n            0\n          ],\n          \"vehicle_id\": 0\n        },\n        {\n          \"order_ids\": [\n            1\n          ],\n          \"vehicle_id\": 1\n        }\n      ],\n      \"skip_first_trips\": [\n        true,\n        false\n      ],\n      \"drop_return_trips\": [\n        true,\n        false\n      ],\n      \"min_vehicles\": 2,\n      \"vehicle_max_costs\": [\n        7,\n        10\n      ],\n      \"vehicle_max_times\": [\n        7,\n        10\n      ]\n    },\n    \"task_data\": {\n      \"task_locations\": [\n        1,\n        2\n      ],\n      \"task_ids\": [\n        \"Task-A\",\n        \"Task-B\"\n      ],\n      \"demand\": [\n        [\n          1,\n          1\n        ],\n        [\n          3,\n          1\n        ]\n      ],\n      \"task_time_windows\": [\n        [\n          0,\n          5\n        ],\n        [\n          3,\n          9\n        ]\n      ],\n      \"service_times\": [\n        0,\n        0\n      ],\n      \"order_vehicle_match\": [\n        {\n          \"order_id\": 0,\n          \"vehicle_ids\": [\n            0\n          ]\n        },\n        {\n          \"order_id\": 1,\n          \"vehicle_ids\": [\n            1\n          ]\n        }\n      ]\n    },\n    \"solver_config\": {\n      \"time_limit\": 1,\n      \"objectives\": {\n        \"cost\": 1,\n        \"travel_time\": 0,\n        \"variance_route_size\": 0,\n        \"variance_route_service_time\": 0,\n        \"prize\": 0\n      },\n      \"verbose_mode\": false,\n      \"error_logging\": true\n    }\n  },\n  \"client_version\": \"\"\n}\n\nlet response = await fetch(invokeUrl, {\n    method: \"post\",\n    body: JSON.stringify(payload),\n    headers: { \"Content-Type\": \"application/json\", ...headers }\n});\n\nwhile (response.status == 202) {\n  let requestId = response.headers.get(\"NVCF-REQID\")\n  let fetchUrl = fetchUrlFormat + requestId;\n  response = await fetch(fetchUrl, {\n      method: \"get\",\n      headers: headers\n  })\n}\n\nif (response.status != 200) {\n  let errBody = await (await response.blob()).text()\n  throw \"invocation failed with status \" + response.status + \" \" + errBody\n}\n\nlet response_body = await response.json()\n\nconsole.log(JSON.stringify(response_body))\n",
                "curl": "invoke_url='https://optimize.api.nvidia.com/v1/nvidia/cuopt'\nfetch_url_format='https://optimize.api.nvidia.com/v1/status/'\n\nauthorization_header='Authorization: Bearer $API_KEY_REQUIRED_IF_EXECUTING_OUTSIDE_NGC'\naccept_header='Accept: application/json'\ncontent_type_header='Content-Type: application/json'\n\ndata='{\n  \"action\": \"cuOpt_OptimizedRouting\",\n  \"data\": {\n    \"cost_waypoint_graph_data\": null,\n    \"travel_time_waypoint_graph_data\": null,\n    \"cost_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"travel_time_matrix_data\": {\n      \"data\": {\n        \"1\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            1,\n            0\n          ]\n        ],\n        \"2\": [\n          [\n            0,\n            1,\n            1\n          ],\n          [\n            1,\n            0,\n            1\n          ],\n          [\n            1,\n            2,\n            0\n          ]\n        ]\n      }\n    },\n    \"fleet_data\": {\n      \"vehicle_locations\": [\n        [\n          0,\n          0\n        ],\n        [\n          0,\n          0\n        ]\n      ],\n      \"vehicle_ids\": [\n        \"veh-1\",\n        \"veh-2\"\n      ],\n      \"capacities\": [\n        [\n          2,\n          2\n        ],\n        [\n          4,\n          1\n        ]\n      ],\n      \"vehicle_time_windows\": [\n        [\n          0,\n          10\n        ],\n        [\n          0,\n          10\n        ]\n      ],\n      \"vehicle_break_time_windows\": [\n        [\n          [\n            1,\n            2\n          ],\n          [\n            2,\n            3\n          ]\n        ]\n      ],\n      \"vehicle_break_durations\": [\n        [\n          1,\n          1\n        ]\n      ],\n      \"vehicle_break_locations\": [\n        0,\n        1\n      ],\n      \"vehicle_types\": [\n        1,\n        2\n      ],\n      \"vehicle_order_match\": [\n        {\n          \"order_ids\": [\n            0\n          ],\n          \"vehicle_id\": 0\n        },\n        {\n          \"order_ids\": [\n            1\n          ],\n          \"vehicle_id\": 1\n        }\n      ],\n      \"skip_first_trips\": [\n        true,\n        false\n      ],\n      \"drop_return_trips\": [\n        true,\n        false\n      ],\n      \"min_vehicles\": 2,\n      \"vehicle_max_costs\": [\n        7,\n        10\n      ],\n      \"vehicle_max_times\": [\n        7,\n        10\n      ]\n    },\n    \"task_data\": {\n      \"task_locations\": [\n        1,\n        2\n      ],\n      \"task_ids\": [\n        \"Task-A\",\n        \"Task-B\"\n      ],\n      \"demand\": [\n        [\n          1,\n          1\n        ],\n        [\n          3,\n          1\n        ]\n      ],\n      \"task_time_windows\": [\n        [\n          0,\n          5\n        ],\n        [\n          3,\n          9\n        ]\n      ],\n      \"service_times\": [\n        0,\n        0\n      ],\n      \"order_vehicle_match\": [\n        {\n          \"order_id\": 0,\n          \"vehicle_ids\": [\n            0\n          ]\n        },\n        {\n          \"order_id\": 1,\n          \"vehicle_ids\": [\n            1\n          ]\n        }\n      ]\n    },\n    \"solver_config\": {\n      \"time_limit\": 1,\n      \"objectives\": {\n        \"cost\": 1,\n        \"travel_time\": 0,\n        \"variance_route_size\": 0,\n        \"variance_route_service_time\": 0,\n        \"prize\": 0\n      },\n      \"verbose_mode\": false,\n      \"error_logging\": true\n    }\n  },\n  \"client_version\": \"\"\n}'\n\nresponse=$(curl --silent -i -w \"\n%{http_code}\" --request POST \\n  --url \"$invoke_url\" \\n  --header \"$authorization_header\" \\n  --header \"$accept_header\" \\n  --header \"$content_type_header\" \\n  --data \"$data\"\n)\n\nhttp_code=$(echo \"$response\" | tail -n 1)\nreq_id=$(echo \"$response\" | grep -i '^nvcf-reqid:' | awk '{print $2}' | tr -d '\r')\n\nwhile [ \"$http_code\" -eq 202 ]; do\n  response=$(curl --silent -i -w \"\n%{http_code}\" --request GET \\n    --url \"$fetch_url_format$req_id\" \\n    --header \"$authorization_header\" \\n    --header \"$accept_header\" \\n    --header \"$content_type_header\" \\n  )\n\n  http_code=$(echo \"$response\" | tail -n 1)\n  req_id=$(echo \"$response\" | grep -i '^nvcf-reqid:' | awk '{print $2}' | tr -d '\r')\ndone\n\necho \"$response\" | awk '/{/,EOF-1'\n"
              },
              "response": "{\"response\":{\"solver_response\":{\"status\":0,\"num_vehicles\":2,\"solution_cost\":2,\"vehicle_data\":{\"veh-1\":{\"task_id\":[\"Break\",\"Task-A\"],\"arrival_stamp\":[1,2],\"route\":[1,1],\"type\":[\"Break\",\"Delivery\"]},\"veh-2\":{\"task_id\":[\"Depot\",\"Break\",\"Task-B\",\"Depot\"],\"arrival_stamp\":[2,2,4,5],\"route\":[0,0,2,0],\"type\":[\"Depot\",\"Break\",\"Delivery\",\"Depot\"]}},\"msg\":\"\",\"perf_times\":{\"etl_time\":0.008506059646606445,\"solver_run_time\":0.5540950298309326}}},\"warnings\":[],\"notes\":[]}"
            }
          ]
        }
      }
    },
    "/status/{requestId}": {
      "get": {
        "tags": [
          "nvidia / cuOpt"
        ],
        "summary": "Status polling",
        "description": "Gets the result of an earlier function invocation request that returned a status of 202.",
        "operationId": "nvidia-cuopt-statuspolling",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId to poll results",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invocation is fulfilled",
            "content": {
              "application/json": {}
            }
          },
          "202": {
            "description": "Result is pending. Client should poll using the requestId.\n",
            "content": {
              "application/json": {
                "example": {},
                "schema": {}
              }
            },
            "headers": {
              "NVCF-REQID": {
                "description": "requestId required for pooling",
                "schema": {
                  "type": "string",
                  "format": "uuid",
                  "maxLength": 36
                }
              },
              "NVCF-STATUS": {
                "description": "Invocation status",
                "schema": {
                  "type": "string",
                  "format": "^[a-zA-Z-]{1,64}$",
                  "maxLength": 64
                }
              }
            }
          },
          "422": {
            "description": "The invocation ended with an error.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "title": {
                      "type": "string",
                      "description": "Error title"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Error status code"
                    },
                    "detail": {
                      "type": "string",
                      "description": "Detailed information about the error"
                    },
                    "instance": {
                      "type": "string",
                      "description": "Function instance used to invoke the request"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "UUID of the request"
                    }
                  },
                  "type": "object",
                  "required": [
                    "type",
                    "title",
                    "status",
                    "detail",
                    "instance",
                    "requestId"
                  ],
                  "title": "InvokeError"
                },
                "example": {
                  "type": "urn:nvcf-worker-service:problem-details:unprocessable-entity",
                  "title": "Unprocessable Entity",
                  "status": 422,
                  "detail": "string",
                  "instance": "/v2/nvcf/pexec/functions/784a8ca4-ea7d-4c93-bb46-ec027c3fae47",
                  "requestId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              }
            }
          },
          "500": {
            "description": "The invocation ended with an error.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Error type"
                    },
                    "title": {
                      "type": "string",
                      "description": "Error title"
                    },
                    "status": {
                      "type": "integer",
                      "description": "Error status code"
                    },
                    "detail": {
                      "type": "string",
                      "description": "Detailed information about the error"
                    },
                    "instance": {
                      "type": "string",
                      "description": "Function instance used to invoke the request"
                    },
                    "requestId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "UUID of the request"
                    }
                  },
                  "type": "object",
                  "required": [
                    "type",
                    "title",
                    "status",
                    "detail",
                    "instance",
                    "requestId"
                  ],
                  "title": "InvokeError"
                },
                "example": {
                  "type": "urn:nvcf-worker-service:problem-details:internal-server-error",
                  "title": "Internal Server Error",
                  "status": 500,
                  "detail": "string",
                  "instance": "/v2/nvcf/pexec/functions/784a8ca4-ea7d-4c93-bb46-ec027c3fae47",
                  "requestId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Token": []
    }
  ],
  "components": {
    "securitySchemes": {
      "Token": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Errors": {
        "properties": {
          "type": {
            "type": "string",
            "description": "Error type"
          },
          "title": {
            "type": "string",
            "description": "Error title"
          },
          "status": {
            "type": "integer",
            "description": "Error status code"
          },
          "detail": {
            "type": "string",
            "description": "Detailed information about the error"
          },
          "instance": {
            "type": "string",
            "description": "Function instance used to invoke the request"
          },
          "requestId": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the request"
          }
        },
        "type": "object",
        "required": [
          "type",
          "title",
          "status",
          "detail",
          "instance",
          "requestId"
        ],
        "title": "InvokeError"
      },
      "DetailModel": {
        "properties": {
          "detail": {
            "type": "string",
            "title": "Detail",
            "description": "Error details"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "DetailModel"
      },
      "EmptyDict": {
        "properties": {},
        "additionalProperties": false,
        "type": "object",
        "title": "EmptyDict"
      },
      "FeasibleResultData": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status",
            "maximum": 0,
            "minimum": 0,
            "description": "0 - Solution is available \n1 - Infeasible solution is available \n",
            "default": 0,
            "examples": [
              0
            ]
          },
          "num_vehicles": {
            "type": "integer",
            "title": "Num Vehicles",
            "maximum": 2147483647,
            "minimum": 0,
            "description": "Number of vehicle being used for the solution",
            "default": -1,
            "examples": [
              2
            ]
          },
          "solution_cost": {
            "type": "number",
            "title": "Solution Cost",
            "description": "Total cost of the solution",
            "default": -1,
            "examples": [
              2
            ]
          },
          "vehicle_data": {
            "additionalProperties": {
              "properties": {
                "task_id": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Task Id",
                  "description": "task_ids being assigned to vehicle along with depot and breaks",
                  "default": []
                },
                "arrival_stamp": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array",
                  "title": "Arrival Stamp",
                  "description": "arrival stamps at each task locations",
                  "default": []
                },
                "route": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array",
                  "title": "Route",
                  "description": "Route indices as per waypoint graph or cost matrix provided",
                  "default": []
                },
                "type": {
                  "items": {
                    "type": "string",
                    "enum": [
                      "Depot",
                      "Pickup",
                      "Delivery",
                      "Break",
                      "w"
                    ],
                    "title": "LocationTypeEnum"
                  },
                  "type": "array",
                  "title": "Type",
                  "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                  "default": []
                }
              },
              "additionalProperties": false,
              "type": "object",
              "title": "VehicleData"
            },
            "type": "object",
            "title": "Vehicle Data",
            "description": "All the details of vehicle routes and timestamps",
            "default": {},
            "examples": [
              {
                "vehicle_data": {
                  "veh-1": {
                    "arrival_stamp": [
                      1,
                      2
                    ],
                    "route": [
                      1,
                      1
                    ],
                    "task_id": [
                      "Break",
                      "Task-A"
                    ],
                    "type": [
                      "Break",
                      "Delivery"
                    ]
                  },
                  "veh-2": {
                    "arrival_stamp": [
                      2,
                      2,
                      4,
                      5
                    ],
                    "route": [
                      0,
                      0,
                      2,
                      0
                    ],
                    "task_id": [
                      "Depot",
                      "Break",
                      "Task-B",
                      "Depot"
                    ],
                    "type": [
                      "Depot",
                      "Break",
                      "Delivery",
                      "Depot"
                    ]
                  }
                }
              }
            ]
          },
          "msg": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Msg",
            "description": "Any information pertaining to the run.",
            "default": ""
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "FeasibleResultData"
      },
      "FeasibleSolve": {
        "properties": {
          "solver_response": {
            "allOf": [
              {
                "properties": {
                  "status": {
                    "type": "integer",
                    "title": "Status",
                    "maximum": 0,
                    "minimum": 0,
                    "description": "0 - Solution is available \n1 - Infeasible solution is available \n",
                    "default": 0,
                    "examples": [
                      0
                    ]
                  },
                  "num_vehicles": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "title": "Num Vehicles",
                    "description": "Number of vehicle being used for the solution",
                    "default": -1,
                    "examples": [
                      2
                    ]
                  },
                  "solution_cost": {
                    "type": "number",
                    "title": "Solution Cost",
                    "description": "Total cost of the solution",
                    "default": -1,
                    "examples": [
                      2
                    ]
                  },
                  "vehicle_data": {
                    "additionalProperties": {
                      "properties": {
                        "task_id": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "title": "Task Id",
                          "description": "task_ids being assigned to vehicle along with depot and breaks",
                          "default": []
                        },
                        "arrival_stamp": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array",
                          "title": "Arrival Stamp",
                          "description": "arrival stamps at each task locations",
                          "default": []
                        },
                        "route": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array",
                          "title": "Route",
                          "description": "Route indices as per waypoint graph or cost matrix provided",
                          "default": []
                        },
                        "type": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Depot",
                              "Pickup",
                              "Delivery",
                              "Break",
                              "w"
                            ],
                            "title": "LocationTypeEnum"
                          },
                          "type": "array",
                          "title": "Type",
                          "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                          "default": []
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "title": "VehicleData"
                    },
                    "type": "object",
                    "title": "Vehicle Data",
                    "description": "All the details of vehicle routes and timestamps",
                    "default": {},
                    "examples": [
                      {
                        "vehicle_data": {
                          "veh-1": {
                            "arrival_stamp": [
                              1,
                              2
                            ],
                            "route": [
                              1,
                              1
                            ],
                            "task_id": [
                              "Break",
                              "Task-A"
                            ],
                            "type": [
                              "Break",
                              "Delivery"
                            ]
                          },
                          "veh-2": {
                            "arrival_stamp": [
                              2,
                              2,
                              4,
                              5
                            ],
                            "route": [
                              0,
                              0,
                              2,
                              0
                            ],
                            "task_id": [
                              "Depot",
                              "Break",
                              "Task-B",
                              "Depot"
                            ],
                            "type": [
                              "Depot",
                              "Break",
                              "Delivery",
                              "Depot"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "msg": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Msg",
                    "description": "Any information pertaining to the run.",
                    "default": ""
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FeasibleResultData"
              }
            ],
            "description": "Feasible solution",
            "default": {
              "status": 0,
              "num_vehicles": -1,
              "solution_cost": -1,
              "vehicle_data": {},
              "msg": ""
            }
          },
          "perf_times": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Perf Times",
            "description": "Etl and Solve times of the solve call"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "FeasibleSolve"
      },
      "FleetData": {
        "properties": {
          "vehicle_locations": {
            "items": {
              "items": {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 0
              },
              "type": "array"
            },
            "type": "array",
            "title": "Vehicle Locations",
            "description": "dtype: int32, vehicle_location >= 0. \n\n Start and end location of the vehicles in the given set of locations in WayPointGraph or CostMatrices.\nExample: For 2 vehicles,  \n\n     [ \n\n         [veh_1_start_loc, veh_1_end_loc], \n\n         [veh_2_start_loc, veh_2_end_loc] \n\n     ]",
            "examples": [
              [
                [
                  0,
                  0
                ],
                [
                  0,
                  0
                ]
              ]
            ]
          },
          "vehicle_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Ids",
            "description": "List of the vehicle ids or names provided as a string.",
            "examples": [
              [
                "veh-1",
                "veh-2"
              ]
            ]
          },
          "capacities": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capacities",
            "description": "dtype: int32, capacity >= 0. \n\n Note: For this release number of capacity dimensions are limited to 3. \n\n Lists of capacities of each vehicle.\nMultiple capacities can be added and each list will represent one kind of capacity. Order of kind of the capacities should match order of the demands.\nTotal capacity for each type should be sufficient to complete all demand of that type.Example: In case of two sets of capacities per vehicle with 3 vehicles,  \n\n     [ \n\n         [cap_1_veh_1, cap_1_veh_2, cap_1_veh_3], \n\n         [cap_2_veh_1, cap_2_veh_2, cap_2_veh_3] \n\n     ]",
            "examples": [
              [
                [
                  2,
                  2
                ],
                [
                  4,
                  1
                ]
              ]
            ]
          },
          "vehicle_time_windows": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Time Windows",
            "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time window pairs for each vehicle,\nfor example the data would look as follows for 2 vehicles, \n \n\n     [ \n\n         [veh_1_earliest, veh_1_latest], \n\n         [veh_2_earliest, veh_2_latest] \n\n     ]",
            "examples": [
              [
                [
                  0,
                  10
                ],
                [
                  0,
                  10
                ]
              ]
            ]
          },
          "vehicle_break_time_windows": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "items": {
                      "type": "integer",
                      "maximum": 2147483647,
                      "minimum": 0
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Break Time Windows",
            "description": "dtype: int32, time >= 0. \n\n Multiple break time windows can be added for each vehicle.Earliest and Latest break time window pairs for each vehicle,\nFor example, in case of 2 sets of breaks for each vehicle which translates to 2 dimensions of breaks,\n \n\n     [ \n\n         [[brk_1_veh_1_earliest, brk_1_veh_1_latest], [brk_1_veh_2_earliest, brk_1_veh_2_latest]] \n\n         [[brk_2_veh_1_earliest, brk_2_veh_1_latest], [brk_2_veh_2_earliest, brk_2_veh_2_latest]] \n\n     ] \n\n The break duration within this time window is provided through vehicle_break_durations.",
            "examples": [
              [
                [
                  [
                    1,
                    2
                  ],
                  [
                    2,
                    3
                  ]
                ]
              ]
            ]
          },
          "vehicle_break_durations": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Break Durations",
            "description": "dtype: int32, time >= 0. \n\n Break duration for each vehicle. vehicle_break_time_windows should be provided to use this option.For example, in case of having 2 breaks for each vehicle,  \n\n     [ \n\n         [brk_1_veh_1_duration, brk_1_veh_2_duration], \n\n         [brk_2_veh_1_duration, brk_2_veh_2_duration], \n\n     ]",
            "examples": [
              [
                [
                  1,
                  1
                ]
              ]
            ]
          },
          "vehicle_break_locations": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Break Locations",
            "description": "dtype: int32, location >= 0. \n\n Break location where vehicles can take breaks. If not set, any location can be used for the break.",
            "examples": [
              [
                0,
                1
              ]
            ]
          },
          "vehicle_types": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "maximum": 255,
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Types",
            "description": "dtype: uint8. \n\n Types of vehicles in the fleet given as positive integers.",
            "examples": [
              [
                1,
                2
              ]
            ]
          },
          "vehicle_order_match": {
            "anyOf": [
              {
                "items": {
                  "properties": {
                    "vehicle_id": {
                      "type": "integer",
                      "title": "Vehicle Id",
                      "description": "dtype: int32, vehicle_id >= 0. \n\n Vehicle id as an integer, and can serve all the order listed in order_ids.",
                      "maximum": 2147483647,
                      "minimum": 0
                    },
                    "order_ids": {
                      "items": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "type": "array",
                      "title": "Order Ids",
                      "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicle"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "vehicle_id",
                    "order_ids"
                  ],
                  "title": "VehicleOrderMatch"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Order Match",
            "description": "A list of vehicle order match, where the match would contain a vehicle id and a list of orders that vehicle can serve.",
            "examples": [
              [
                {
                  "order_ids": [
                    0
                  ],
                  "vehicle_id": 0
                },
                {
                  "order_ids": [
                    1
                  ],
                  "vehicle_id": 1
                }
              ]
            ]
          },
          "skip_first_trips": {
            "anyOf": [
              {
                "items": {
                  "type": "boolean"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Skip First Trips",
            "description": "Drop the cost of trip to first location for that vehicle.",
            "examples": [
              [
                true,
                false
              ]
            ]
          },
          "drop_return_trips": {
            "anyOf": [
              {
                "items": {
                  "type": "boolean"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Drop Return Trips",
            "description": "Drop cost of return trip for each vehicle.",
            "examples": [
              [
                true,
                false
              ]
            ]
          },
          "min_vehicles": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 2147483647,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Vehicles",
            "description": "dtype: int32, min_vehicles >= 1. \n\n Solution should consider minimum number of vehicles",
            "examples": [
              2
            ]
          },
          "vehicle_max_costs": {
            "anyOf": [
              {
                "items": {
                  "type": "number",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Max Costs",
            "description": "dtype: float32, max_costs >= 0. \n\n Maximum cost a vehicle can incur and it is based on cost matrix/cost waypoint graph.",
            "examples": [
              [
                7,
                10
              ]
            ]
          },
          "vehicle_max_times": {
            "anyOf": [
              {
                "items": {
                  "type": "number",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Max Times",
            "description": "dtype: float32, max_time >= 0. \n\n Maximum time a vehicle can operate (includes drive, service and wait time), this is based on travel time matrix/travel time waypoint graph.",
            "examples": [
              [
                7,
                10
              ]
            ]
          },
          "vehicle_fixed_costs": {
            "anyOf": [
              {
                "items": {
                  "type": "number",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Fixed Costs",
            "description": "dtype: float32, fixed_cost >= 0. \n\n Cost of each vehicle.This helps in routing where may be 2 vehicles with less cost is effective compared to 1 vehicle with huge cost. As example shows veh-0 (15) > veh-1 (5) + veh-2 (5)",
            "examples": [
              [
                15,
                5
              ]
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "vehicle_locations"
        ],
        "title": "FleetData"
      },
      "InFeasibleSolve": {
        "properties": {
          "solver_infeasible_response": {
            "allOf": [
              {
                "properties": {
                  "status": {
                    "type": "integer",
                    "title": "Status",
                    "description": "1 - Infeasible solution is available \n",
                    "default": 1,
                    "examples": [
                      1
                    ],
                    "maximum": 1,
                    "minimum": 1
                  },
                  "num_vehicles": {
                    "type": "integer",
                    "title": "Num Vehicles",
                    "description": "Number of vehicle being used for the solution",
                    "default": -1,
                    "examples": [
                      2
                    ],
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "solution_cost": {
                    "type": "number",
                    "title": "Solution Cost",
                    "description": "Total cost of the solution",
                    "default": -1,
                    "examples": [
                      2
                    ]
                  },
                  "vehicle_data": {
                    "additionalProperties": {
                      "properties": {
                        "task_id": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array",
                          "title": "Task Id",
                          "description": "task_ids being assigned to vehicle along with depot and breaks",
                          "default": []
                        },
                        "arrival_stamp": {
                          "items": {
                            "type": "number"
                          },
                          "type": "array",
                          "title": "Arrival Stamp",
                          "description": "arrival stamps at each task locations",
                          "default": []
                        },
                        "route": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array",
                          "title": "Route",
                          "description": "Route indices as per waypoint graph or cost matrix provided",
                          "default": []
                        },
                        "type": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Depot",
                              "Pickup",
                              "Delivery",
                              "Break",
                              "w"
                            ],
                            "title": "LocationTypeEnum"
                          },
                          "type": "array",
                          "title": "Type",
                          "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                          "default": []
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "title": "VehicleData"
                    },
                    "type": "object",
                    "title": "Vehicle Data",
                    "description": "All the details of vehicle routes and timestamps",
                    "default": {},
                    "examples": [
                      {
                        "vehicle_data": {
                          "veh-1": {
                            "arrival_stamp": [
                              1,
                              2
                            ],
                            "route": [
                              1,
                              1
                            ],
                            "task_id": [
                              "Break",
                              "Task-A"
                            ],
                            "type": [
                              "Break",
                              "Delivery"
                            ]
                          },
                          "veh-2": {
                            "arrival_stamp": [
                              2,
                              2,
                              4,
                              5
                            ],
                            "route": [
                              0,
                              0,
                              2,
                              0
                            ],
                            "task_id": [
                              "Depot",
                              "Break",
                              "Task-B",
                              "Depot"
                            ],
                            "type": [
                              "Depot",
                              "Break",
                              "Delivery",
                              "Depot"
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "msg": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Msg",
                    "description": "Any information pertaining to the run.",
                    "default": ""
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "InfeasibleResultData"
              }
            ],
            "description": "Infeasible solution, this can mean the problem itself is infeasible or solver requires more time to find a solution. Setting default solve time is suggested in case you are not aware of the expected time.",
            "default": {
              "status": 1,
              "num_vehicles": -1,
              "solution_cost": -1,
              "vehicle_data": {},
              "msg": ""
            }
          },
          "perf_times": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Perf Times",
            "description": "Etl and Solve times of the solve call"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "InFeasibleSolve"
      },
      "InfeasibleResultData": {
        "properties": {
          "status": {
            "type": "integer",
            "title": "Status",
            "description": "1 - Infeasible solution is available \n",
            "default": 1,
            "examples": [
              1
            ],
            "maximum": 1,
            "minimum": 1
          },
          "num_vehicles": {
            "type": "integer",
            "title": "Num Vehicles",
            "description": "Number of vehicle being used for the solution",
            "default": -1,
            "examples": [
              2
            ],
            "maximum": 2147483647,
            "minimum": 0
          },
          "solution_cost": {
            "type": "number",
            "title": "Solution Cost",
            "description": "Total cost of the solution",
            "default": -1,
            "examples": [
              2
            ]
          },
          "vehicle_data": {
            "additionalProperties": {
              "properties": {
                "task_id": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Task Id",
                  "description": "task_ids being assigned to vehicle along with depot and breaks",
                  "default": []
                },
                "arrival_stamp": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array",
                  "title": "Arrival Stamp",
                  "description": "arrival stamps at each task locations",
                  "default": []
                },
                "route": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array",
                  "title": "Route",
                  "description": "Route indices as per waypoint graph or cost matrix provided",
                  "default": []
                },
                "type": {
                  "items": {
                    "type": "string",
                    "enum": [
                      "Depot",
                      "Pickup",
                      "Delivery",
                      "Break",
                      "w"
                    ],
                    "title": "LocationTypeEnum"
                  },
                  "type": "array",
                  "title": "Type",
                  "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                  "default": []
                }
              },
              "additionalProperties": false,
              "type": "object",
              "title": "VehicleData"
            },
            "type": "object",
            "title": "Vehicle Data",
            "description": "All the details of vehicle routes and timestamps",
            "default": {},
            "examples": [
              {
                "vehicle_data": {
                  "veh-1": {
                    "arrival_stamp": [
                      1,
                      2
                    ],
                    "route": [
                      1,
                      1
                    ],
                    "task_id": [
                      "Break",
                      "Task-A"
                    ],
                    "type": [
                      "Break",
                      "Delivery"
                    ]
                  },
                  "veh-2": {
                    "arrival_stamp": [
                      2,
                      2,
                      4,
                      5
                    ],
                    "route": [
                      0,
                      0,
                      2,
                      0
                    ],
                    "task_id": [
                      "Depot",
                      "Break",
                      "Task-B",
                      "Depot"
                    ],
                    "type": [
                      "Depot",
                      "Break",
                      "Delivery",
                      "Depot"
                    ]
                  }
                }
              }
            ]
          },
          "msg": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Msg",
            "description": "Any information pertaining to the run.",
            "default": ""
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "InfeasibleResultData"
      },
      "LocationTypeEnum": {
        "type": "string",
        "enum": [
          "Depot",
          "Pickup",
          "Delivery",
          "Break",
          "w"
        ],
        "title": "LocationTypeEnum"
      },
      "Objective": {
        "properties": {
          "cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost",
            "description": "dtype: float32.  \n\n The weight assigned to minimizing the cost for a given solution, default value is 1",
            "examples": [
              1
            ]
          },
          "travel_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Travel Time",
            "description": "dtype: float32. \n\n The weight assigned to minimizing total travel time for a given solution (includes drive, service and wait time)",
            "examples": [
              0
            ]
          },
          "variance_route_size": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variance Route Size",
            "description": "dtype: float32. \n\n The weight assigned to the variance in the number of orders served by each route.",
            "examples": [
              0
            ]
          },
          "variance_route_service_time": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Variance Route Service Time",
            "description": "dtype: float32. \n\n The weight assigned to the variance in the accumulated service times of each route",
            "examples": [
              0
            ]
          },
          "prize": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prize",
            "description": "dtype: float32. \n\n The weight assigned to the prize in accumulated prizes for each job fulfilled.This will be negated from overall values accumulated with other objectives.For example, if cost accumulated is 10 and objective value for it is 1, and if the prize accumulated is 3 and objective is 2, then total cost would look something like this 10 x 1 - 3 x 2 = 4.",
            "examples": [
              0
            ]
          },
          "vehicle_fixed_cost": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vehicle Fixed Cost",
            "description": "dtype: float32. \n\n The weight assigned to the accumulated fixed costs of each vehicle used in solution",
            "examples": [
              0
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Objective"
      },
      "OptimizedRoutingData": {
        "properties": {
          "cost_waypoint_graph_data": {
            "anyOf": [
              {
                "properties": {
                  "waypoint_graph": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "properties": {
                            "edges": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array",
                              "title": "Edges",
                              "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                            },
                            "offsets": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array",
                              "title": "Offsets",
                              "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                            },
                            "weights": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "number",
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "null"
                                }
                              ],
                              "title": "Weights",
                              "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "edges",
                            "offsets"
                          ],
                          "title": "WaypointGraph"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Waypoint Graph"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateWaypointGraphData"
              },
              {
                "type": "null"
              }
            ],
            "description": "Waypoint graph with weights as cost to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
            "default": {},
            "examples": [
              null
            ]
          },
          "travel_time_waypoint_graph_data": {
            "anyOf": [
              {
                "properties": {
                  "waypoint_graph": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "properties": {
                            "edges": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array",
                              "title": "Edges",
                              "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                            },
                            "offsets": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array",
                              "title": "Offsets",
                              "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                            },
                            "weights": {
                              "anyOf": [
                                {
                                  "items": {
                                    "type": "number",
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                {
                                  "type": "null"
                                }
                              ],
                              "title": "Weights",
                              "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "edges",
                            "offsets"
                          ],
                          "title": "WaypointGraph"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Waypoint Graph"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateWaypointGraphData"
              },
              {
                "type": "null"
              }
            ],
            "description": "Waypoint graph with weights as time to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
            "default": {},
            "examples": [
              null
            ]
          },
          "cost_matrix_data": {
            "anyOf": [
              {
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "items": {
                            "items": {
                              "type": "number",
                              "minimum": 0
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Data",
                    "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                  },
                  "cost_matrix": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "items": {
                            "items": {
                              "type": "number",
                              "minimum": 0
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Cost Matrix",
                    "description": "This field is deprecated, please use the 'data' field instead",
                    "deprecated": true
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateCostMatrices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sqaure matrix with cost to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]",
            "default": {},
            "examples": [
              {
                "cost_matrix": {
                  "1": [
                    [
                      0,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      1,
                      0
                    ]
                  ],
                  "2": [
                    [
                      0,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      2,
                      0
                    ]
                  ]
                }
              }
            ]
          },
          "travel_time_matrix_data": {
            "anyOf": [
              {
                "properties": {
                  "data": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "items": {
                            "items": {
                              "type": "number",
                              "minimum": 0
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Data",
                    "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                  },
                  "cost_matrix": {
                    "anyOf": [
                      {
                        "additionalProperties": {
                          "items": {
                            "items": {
                              "type": "number",
                              "minimum": 0
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Cost Matrix",
                    "description": "This field is deprecated, please use the 'data' field instead",
                    "deprecated": true
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateCostMatrices"
              },
              {
                "type": "null"
              }
            ],
            "description": "Sqaure matrix with time to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ntravel time matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is time matrix. Value of \nvehicle type should be within [0, 255]",
            "default": {},
            "examples": [
              {
                "cost_matrix": {
                  "1": [
                    [
                      0,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      1,
                      0
                    ]
                  ],
                  "2": [
                    [
                      0,
                      1,
                      1
                    ],
                    [
                      1,
                      0,
                      1
                    ],
                    [
                      1,
                      2,
                      0
                    ]
                  ]
                }
              }
            ]
          },
          "fleet_data": {
            "allOf": [
              {
                "properties": {
                  "vehicle_locations": {
                    "items": {
                      "items": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "type": "array"
                    },
                    "type": "array",
                    "title": "Vehicle Locations",
                    "description": "dtype: int32, vehicle_location >= 0. \n\n Start and end location of the vehicles in the given set of locations in WayPointGraph or CostMatrices.\nExample: For 2 vehicles,  \n\n     [ \n\n         [veh_1_start_loc, veh_1_end_loc], \n\n         [veh_2_start_loc, veh_2_end_loc] \n\n     ]",
                    "examples": [
                      [
                        [
                          0,
                          0
                        ],
                        [
                          0,
                          0
                        ]
                      ]
                    ]
                  },
                  "vehicle_ids": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Ids",
                    "description": "List of the vehicle ids or names provided as a string.",
                    "examples": [
                      [
                        "veh-1",
                        "veh-2"
                      ]
                    ]
                  },
                  "capacities": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Capacities",
                    "description": "dtype: int32, capacity >= 0. \n\n Note: For this release number of capacity dimensions are limited to 3. \n\n Lists of capacities of each vehicle.\nMultiple capacities can be added and each list will represent one kind of capacity. Order of kind of the capacities should match order of the demands.\nTotal capacity for each type should be sufficient to complete all demand of that type.Example: In case of two sets of capacities per vehicle with 3 vehicles,  \n\n     [ \n\n         [cap_1_veh_1, cap_1_veh_2, cap_1_veh_3], \n\n         [cap_2_veh_1, cap_2_veh_2, cap_2_veh_3] \n\n     ]",
                    "examples": [
                      [
                        [
                          2,
                          2
                        ],
                        [
                          4,
                          1
                        ]
                      ]
                    ]
                  },
                  "vehicle_time_windows": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Time Windows",
                    "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time window pairs for each vehicle,\nfor example the data would look as follows for 2 vehicles, \n \n\n     [ \n\n         [veh_1_earliest, veh_1_latest], \n\n         [veh_2_earliest, veh_2_latest] \n\n     ]",
                    "examples": [
                      [
                        [
                          0,
                          10
                        ],
                        [
                          0,
                          10
                        ]
                      ]
                    ]
                  },
                  "vehicle_break_time_windows": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "items": {
                              "type": "integer",
                              "maximum": 2147483647,
                              "minimum": 0
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Break Time Windows",
                    "description": "dtype: int32, time >= 0. \n\n Multiple break time windows can be added for each vehicle.Earliest and Latest break time window pairs for each vehicle,\nFor example, in case of 2 sets of breaks for each vehicle which translates to 2 dimensions of breaks,\n \n\n     [ \n\n         [[brk_1_veh_1_earliest, brk_1_veh_1_latest], [brk_1_veh_2_earliest, brk_1_veh_2_latest]] \n\n         [[brk_2_veh_1_earliest, brk_2_veh_1_latest], [brk_2_veh_2_earliest, brk_2_veh_2_latest]] \n\n     ] \n\n The break duration within this time window is provided through vehicle_break_durations.",
                    "examples": [
                      [
                        [
                          [
                            1,
                            2
                          ],
                          [
                            2,
                            3
                          ]
                        ]
                      ]
                    ]
                  },
                  "vehicle_break_durations": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Break Durations",
                    "description": "dtype: int32, time >= 0. \n\n Break duration for each vehicle. vehicle_break_time_windows should be provided to use this option.For example, in case of having 2 breaks for each vehicle,  \n\n     [ \n\n         [brk_1_veh_1_duration, brk_1_veh_2_duration], \n\n         [brk_2_veh_1_duration, brk_2_veh_2_duration], \n\n     ]",
                    "examples": [
                      [
                        [
                          1,
                          1
                        ]
                      ]
                    ]
                  },
                  "vehicle_break_locations": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "integer",
                          "maximum": 2147483647,
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Break Locations",
                    "description": "dtype: int32, location >= 0. \n\n Break location where vehicles can take breaks. If not set, any location can be used for the break.",
                    "examples": [
                      [
                        0,
                        1
                      ]
                    ]
                  },
                  "vehicle_types": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "integer",
                          "maximum": 255,
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Types",
                    "description": "dtype: uint8. \n\n Types of vehicles in the fleet given as positive integers.",
                    "examples": [
                      [
                        1,
                        2
                      ]
                    ]
                  },
                  "vehicle_order_match": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "vehicle_id": {
                              "type": "integer",
                              "title": "Vehicle Id",
                              "description": "dtype: int32, vehicle_id >= 0. \n\n Vehicle id as an integer, and can serve all the order listed in order_ids.",
                              "maximum": 2147483647,
                              "minimum": 0
                            },
                            "order_ids": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array",
                              "title": "Order Ids",
                              "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicle"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "vehicle_id",
                            "order_ids"
                          ],
                          "title": "VehicleOrderMatch"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Order Match",
                    "description": "A list of vehicle order match, where the match would contain a vehicle id and a list of orders that vehicle can serve.",
                    "examples": [
                      [
                        {
                          "order_ids": [
                            0
                          ],
                          "vehicle_id": 0
                        },
                        {
                          "order_ids": [
                            1
                          ],
                          "vehicle_id": 1
                        }
                      ]
                    ]
                  },
                  "skip_first_trips": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "boolean"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Skip First Trips",
                    "description": "Drop the cost of trip to first location for that vehicle.",
                    "examples": [
                      [
                        true,
                        false
                      ]
                    ]
                  },
                  "drop_return_trips": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "boolean"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Drop Return Trips",
                    "description": "Drop cost of return trip for each vehicle.",
                    "examples": [
                      [
                        true,
                        false
                      ]
                    ]
                  },
                  "min_vehicles": {
                    "anyOf": [
                      {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Min Vehicles",
                    "description": "dtype: int32, min_vehicles >= 1. \n\n Solution should consider minimum number of vehicles",
                    "examples": [
                      2
                    ]
                  },
                  "vehicle_max_costs": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "number",
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Max Costs",
                    "description": "dtype: float32, max_costs >= 0. \n\n Maximum cost a vehicle can incur and it is based on cost matrix/cost waypoint graph.",
                    "examples": [
                      [
                        7,
                        10
                      ]
                    ]
                  },
                  "vehicle_max_times": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "number",
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Max Times",
                    "description": "dtype: float32, max_time >= 0. \n\n Maximum time a vehicle can operate (includes drive, service and wait time), this is based on travel time matrix/travel time waypoint graph.",
                    "examples": [
                      [
                        7,
                        10
                      ]
                    ]
                  },
                  "vehicle_fixed_costs": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "number",
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Fixed Costs",
                    "description": "dtype: float32, fixed_cost >= 0. \n\n Cost of each vehicle.This helps in routing where may be 2 vehicles with less cost is effective compared to 1 vehicle with huge cost. As example shows veh-0 (15) > veh-1 (5) + veh-2 (5)",
                    "examples": [
                      [
                        15,
                        5
                      ]
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "vehicle_locations"
                ],
                "title": "FleetData"
              }
            ],
            "description": "All Fleet information"
          },
          "task_data": {
            "allOf": [
              {
                "properties": {
                  "task_locations": {
                    "items": {
                      "type": "integer",
                      "maximum": 2147483647,
                      "minimum": 0
                    },
                    "type": "array",
                    "title": "Task Locations",
                    "description": "dtype: int32, location >= 0. \n\n Location where the task has been requested.",
                    "examples": [
                      [
                        1,
                        2
                      ]
                    ]
                  },
                  "task_ids": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Task Ids",
                    "description": "List of the task ids or names provided as a string.",
                    "examples": [
                      [
                        "Task-A",
                        "Task-B"
                      ]
                    ]
                  },
                  "demand": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Demand",
                    "description": "dtype: int32 \n\n Note: For this release number of demand dimensions are limited to 3. \n\n Lists of demands of each tasks.\nMultiple demands can be added and each list represents one kind of demand. Order of these demands should match the type of vehicle capacities provided.Example: In case of two sets of demands per vehicle with 3 vehicles,  \n\n     [ \n\n         [dem_1_tsk_1, dem_1_tsk_2, dem_1_tsk_3], \n\n         [dem_2_tsk_1, dem_2_tsk_2, dem_2_tsk_3] \n\n     ]",
                    "examples": [
                      [
                        [
                          1,
                          1
                        ],
                        [
                          3,
                          1
                        ]
                      ]
                    ]
                  },
                  "pickup_and_delivery_pairs": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Pickup And Delivery Pairs",
                    "description": "dtype: int32, pairs >= 0. \n\n List of Pick-up and delivery index pairs from task locations.\nIn case we have the following pick-up and delivery locations, 2->1, 4->5, 3->4, then task locations would look something like, task_locations = [0, 2, 1, 4, 5, 3, 4] and pick-up and delivery pairs would be index of those locations in task location and would look like [[1, 2], [3, 4], [5, 6]], 1 is pickup index for location 2 and it should be delivered to location 1 which is at index 2.Example schema:  \n\n     [ \n\n         [pcikup_1_idx_to_task, drop_1_idx_to_task], \n\n         [pcikup_2_idx_to_task, drop_2_idx_to_task], \n\n     ]",
                    "examples": [
                      null
                    ]
                  },
                  "task_time_windows": {
                    "anyOf": [
                      {
                        "items": {
                          "items": {
                            "type": "integer",
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Task Time Windows",
                    "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time windows for each tasks.\nFor example the data would look as follows, \n \n\n     [ \n\n         [tsk_1_earliest, tsk_1_latest], \n\n         [tsk_2_earliest, tsk_2_latest] \n\n     ]",
                    "examples": [
                      [
                        [
                          0,
                          5
                        ],
                        [
                          3,
                          9
                        ]
                      ]
                    ]
                  },
                  "service_times": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "integer",
                          "maximum": 2147483647,
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "additionalProperties": {
                          "items": {
                            "type": "integer"
                          },
                          "type": "array"
                        },
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Service Times",
                    "description": "dtype: int32, time >= 0. \n\n Service time for each task. Accepts a list of service times for all vehicles. In case of vehicle specific service times, accepts a dict with key as vehicle id and value as list of service times.Example schema: In case all vehicles have same service times,  \n\n     [tsk_1_srv_time, tsk_2_srv_time, tsk_3_srv_time] \n\n  \n\n In case, there are 2 types of vehicle types and each of them have different service times, \n\n     { \n\n         type-1: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time], \n\n         type-2: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time] \n\n     }",
                    "examples": [
                      [
                        0,
                        0
                      ]
                    ]
                  },
                  "prizes": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "number",
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Prizes",
                    "description": "dtype: float32, prizes >= 0. \n\n List of values which signifies prizes that are collected for fulfilling each task. This can be used effectively in case solution is infeasible and need to drop few tasks to get feasible solution. Solver will prioritize for higher prize tasks ",
                    "examples": [
                      null
                    ]
                  },
                  "order_vehicle_match": {
                    "anyOf": [
                      {
                        "items": {
                          "properties": {
                            "order_id": {
                              "type": "integer",
                              "title": "Order Id",
                              "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicleOrder id as an integer",
                              "maximum": 2147483647,
                              "minimum": 0
                            },
                            "vehicle_ids": {
                              "items": {
                                "type": "integer"
                              },
                              "type": "array",
                              "title": "Vehicle Ids",
                              "description": "dtype: int32, vehicle_id >= 0. \n\n Indices of the vehicles which can serve this particular order. \n",
                              "maximum": 2147483647,
                              "minimum": 0
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "order_id",
                            "vehicle_ids"
                          ],
                          "title": "OrderVehicleMatch"
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Order Vehicle Match",
                    "description": "A list of order vehicle match, where the match would contain a order id and a list of vehicle ids that can serve this order.",
                    "examples": [
                      [
                        {
                          "order_id": 0,
                          "vehicle_ids": [
                            0
                          ]
                        },
                        {
                          "order_id": 1,
                          "vehicle_ids": [
                            1
                          ]
                        }
                      ]
                    ]
                  },
                  "mandatory_task_ids": {
                    "anyOf": [
                      {
                        "items": {
                          "type": "integer",
                          "maximum": 2147483647,
                          "minimum": 0
                        },
                        "type": "array"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Mandatory Task Ids",
                    "description": "dtype: int32, mandatory_task_id >= 0. \n\n Note: This is only effective when used along with drop infeasible option. \n\n A list of task ids which are mandatory and solver would fail if these cannot be fulfilled.",
                    "examples": [
                      null
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "task_locations"
                ],
                "title": "TaskData"
              }
            ],
            "description": "All Task information"
          },
          "solver_config": {
            "anyOf": [
              {
                "properties": {
                  "time_limit": {
                    "anyOf": [
                      {
                        "type": "number",
                        "minimum": 0
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Time Limit",
                    "description": "SolverSettings time limit",
                    "examples": [
                      1
                    ]
                  },
                  "objectives": {
                    "anyOf": [
                      {
                        "properties": {
                          "cost": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Cost",
                            "description": "dtype: float32.  \n\n The weight assigned to minimizing the cost for a given solution, default value is 1",
                            "examples": [
                              1
                            ]
                          },
                          "travel_time": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Travel Time",
                            "description": "dtype: float32. \n\n The weight assigned to minimizing total travel time for a given solution (includes drive, service and wait time)",
                            "examples": [
                              0
                            ]
                          },
                          "variance_route_size": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Variance Route Size",
                            "description": "dtype: float32. \n\n The weight assigned to the variance in the number of orders served by each route.",
                            "examples": [
                              0
                            ]
                          },
                          "variance_route_service_time": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Variance Route Service Time",
                            "description": "dtype: float32. \n\n The weight assigned to the variance in the accumulated service times of each route",
                            "examples": [
                              0
                            ]
                          },
                          "prize": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Prize",
                            "description": "dtype: float32. \n\n The weight assigned to the prize in accumulated prizes for each job fulfilled.This will be negated from overall values accumulated with other objectives.For example, if cost accumulated is 10 and objective value for it is 1, and if the prize accumulated is 3 and objective is 2, then total cost would look something like this 10 x 1 - 3 x 2 = 4.",
                            "examples": [
                              0
                            ]
                          },
                          "vehicle_fixed_cost": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Fixed Cost",
                            "description": "dtype: float32. \n\n The weight assigned to the accumulated fixed costs of each vehicle used in solution",
                            "examples": [
                              0
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "Objective"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Values provided dictate the linear combination of factors used to evaluate solution quality.Only prize will be negated, all others gets accumulated. That's why sometime you might come across negative value as solution cost."
                  },
                  "config_file": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Config File",
                    "description": "Dump configuration information in a given file as yaml",
                    "examples": [
                      null
                    ]
                  },
                  "verbose_mode": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Verbose Mode",
                    "description": "Displaying internal information during the solver execution.",
                    "default": false
                  },
                  "error_logging": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Error Logging",
                    "description": "Displaying constraint error information during the solver execution.",
                    "default": true
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UpdateSolverSettingsConfig"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "fleet_data",
          "task_data"
        ],
        "title": "OptimizedRoutingData"
      },
      "OrderVehicleMatch": {
        "properties": {
          "order_id": {
            "type": "integer",
            "title": "Order Id",
            "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicleOrder id as an integer",
            "maximum": 2147483647,
            "minimum": 0
          },
          "vehicle_ids": {
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": 0
            },
            "type": "array",
            "title": "Vehicle Ids",
            "description": "dtype: int32, vehicle_id >= 0. \n\n Indices of the vehicles which can serve this particular order. \n"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "order_id",
          "vehicle_ids"
        ],
        "title": "OrderVehicleMatch"
      },
      "ResponseModel": {
        "properties": {
          "response": {
            "anyOf": [
              {
                "properties": {
                  "solver_response": {
                    "allOf": [
                      {
                        "properties": {
                          "status": {
                            "type": "integer",
                            "title": "Status",
                            "description": "0 - Solution is available \n1 - Infeasible solution is available \n",
                            "default": 0,
                            "examples": [
                              0
                            ],
                            "maximum": 0,
                            "minimum": 0
                          },
                          "num_vehicles": {
                            "type": "integer",
                            "title": "Num Vehicles",
                            "description": "Number of vehicle being used for the solution",
                            "default": -1,
                            "maximum": 2147483647,
                            "minimum": 0,
                            "examples": [
                              2
                            ]
                          },
                          "solution_cost": {
                            "type": "number",
                            "title": "Solution Cost",
                            "description": "Total cost of the solution",
                            "default": -1,
                            "examples": [
                              2
                            ]
                          },
                          "vehicle_data": {
                            "additionalProperties": {
                              "properties": {
                                "task_id": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "title": "Task Id",
                                  "description": "task_ids being assigned to vehicle along with depot and breaks",
                                  "default": []
                                },
                                "arrival_stamp": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array",
                                  "title": "Arrival Stamp",
                                  "description": "arrival stamps at each task locations",
                                  "default": []
                                },
                                "route": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array",
                                  "title": "Route",
                                  "description": "Route indices as per waypoint graph or cost matrix provided",
                                  "default": []
                                },
                                "type": {
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "Depot",
                                      "Pickup",
                                      "Delivery",
                                      "Break",
                                      "w"
                                    ],
                                    "title": "LocationTypeEnum"
                                  },
                                  "type": "array",
                                  "title": "Type",
                                  "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                                  "default": []
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "title": "VehicleData"
                            },
                            "type": "object",
                            "title": "Vehicle Data",
                            "description": "All the details of vehicle routes and timestamps",
                            "default": {},
                            "examples": [
                              {
                                "vehicle_data": {
                                  "veh-1": {
                                    "arrival_stamp": [
                                      1,
                                      2
                                    ],
                                    "route": [
                                      1,
                                      1
                                    ],
                                    "task_id": [
                                      "Break",
                                      "Task-A"
                                    ],
                                    "type": [
                                      "Break",
                                      "Delivery"
                                    ]
                                  },
                                  "veh-2": {
                                    "arrival_stamp": [
                                      2,
                                      2,
                                      4,
                                      5
                                    ],
                                    "route": [
                                      0,
                                      0,
                                      2,
                                      0
                                    ],
                                    "task_id": [
                                      "Depot",
                                      "Break",
                                      "Task-B",
                                      "Depot"
                                    ],
                                    "type": [
                                      "Depot",
                                      "Break",
                                      "Delivery",
                                      "Depot"
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "msg": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Msg",
                            "description": "Any information pertaining to the run.",
                            "default": ""
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "FeasibleResultData"
                      }
                    ],
                    "description": "Feasible solution",
                    "default": {
                      "status": 0,
                      "num_vehicles": -1,
                      "solution_cost": -1,
                      "vehicle_data": {},
                      "msg": ""
                    }
                  },
                  "perf_times": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Perf Times",
                    "description": "Etl and Solve times of the solve call"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "FeasibleSolve"
              },
              {
                "properties": {
                  "solver_infeasible_response": {
                    "allOf": [
                      {
                        "properties": {
                          "status": {
                            "type": "integer",
                            "title": "Status",
                            "description": "1 - Infeasible solution is available \n",
                            "default": 1,
                            "examples": [
                              1
                            ],
                            "maximum": 1,
                            "minimum": 1
                          },
                          "num_vehicles": {
                            "type": "integer",
                            "title": "Num Vehicles",
                            "description": "Number of vehicle being used for the solution",
                            "default": -1,
                            "examples": [
                              2
                            ],
                            "maximum": 2147483647,
                            "minimum": 0
                          },
                          "solution_cost": {
                            "type": "number",
                            "title": "Solution Cost",
                            "description": "Total cost of the solution",
                            "default": -1,
                            "examples": [
                              2
                            ]
                          },
                          "vehicle_data": {
                            "additionalProperties": {
                              "properties": {
                                "task_id": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array",
                                  "title": "Task Id",
                                  "description": "task_ids being assigned to vehicle along with depot and breaks",
                                  "default": []
                                },
                                "arrival_stamp": {
                                  "items": {
                                    "type": "number"
                                  },
                                  "type": "array",
                                  "title": "Arrival Stamp",
                                  "description": "arrival stamps at each task locations",
                                  "default": []
                                },
                                "route": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array",
                                  "title": "Route",
                                  "description": "Route indices as per waypoint graph or cost matrix provided",
                                  "default": []
                                },
                                "type": {
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "Depot",
                                      "Pickup",
                                      "Delivery",
                                      "Break",
                                      "w"
                                    ],
                                    "title": "LocationTypeEnum"
                                  },
                                  "type": "array",
                                  "title": "Type",
                                  "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
                                  "default": []
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "title": "VehicleData"
                            },
                            "type": "object",
                            "title": "Vehicle Data",
                            "description": "All the details of vehicle routes and timestamps",
                            "default": {},
                            "examples": [
                              {
                                "vehicle_data": {
                                  "veh-1": {
                                    "arrival_stamp": [
                                      1,
                                      2
                                    ],
                                    "route": [
                                      1,
                                      1
                                    ],
                                    "task_id": [
                                      "Break",
                                      "Task-A"
                                    ],
                                    "type": [
                                      "Break",
                                      "Delivery"
                                    ]
                                  },
                                  "veh-2": {
                                    "arrival_stamp": [
                                      2,
                                      2,
                                      4,
                                      5
                                    ],
                                    "route": [
                                      0,
                                      0,
                                      2,
                                      0
                                    ],
                                    "task_id": [
                                      "Depot",
                                      "Break",
                                      "Task-B",
                                      "Depot"
                                    ],
                                    "type": [
                                      "Depot",
                                      "Break",
                                      "Delivery",
                                      "Depot"
                                    ]
                                  }
                                }
                              }
                            ]
                          },
                          "msg": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Msg",
                            "description": "Any information pertaining to the run.",
                            "default": ""
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "InfeasibleResultData"
                      }
                    ],
                    "description": "Infeasible solution, this can mean the problem itself is infeasible or solver requires more time to find a solution. Setting default solve time is suggested in case you are not aware of the expected time.",
                    "default": {
                      "status": 1,
                      "num_vehicles": -1,
                      "solution_cost": -1,
                      "vehicle_data": {},
                      "msg": ""
                    }
                  },
                  "perf_times": {
                    "anyOf": [
                      {
                        "type": "object"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Perf Times",
                    "description": "Etl and Solve times of the solve call"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "InFeasibleSolve"
              }
            ],
            "title": "Response",
            "description": "Response"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Warnings",
            "description": "List of warnings for users to handle issues",
            "default": []
          },
          "notes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Notes",
            "description": "Any notes for users",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "response"
        ],
        "title": "ResponseModel"
      },
      "TaskData": {
        "properties": {
          "task_locations": {
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": 0
            },
            "type": "array",
            "title": "Task Locations",
            "description": "dtype: int32, location >= 0. \n\n Location where the task has been requested.",
            "examples": [
              [
                1,
                2
              ]
            ]
          },
          "task_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Ids",
            "description": "List of the task ids or names provided as a string.",
            "examples": [
              [
                "Task-A",
                "Task-B"
              ]
            ]
          },
          "demand": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Demand",
            "description": "dtype: int32 \n\n Note: For this release number of demand dimensions are limited to 3. \n\n Lists of demands of each tasks.\nMultiple demands can be added and each list represents one kind of demand. Order of these demands should match the type of vehicle capacities provided.Example: In case of two sets of demands per vehicle with 3 vehicles,  \n\n     [ \n\n         [dem_1_tsk_1, dem_1_tsk_2, dem_1_tsk_3], \n\n         [dem_2_tsk_1, dem_2_tsk_2, dem_2_tsk_3] \n\n     ]",
            "examples": [
              [
                [
                  1,
                  1
                ],
                [
                  3,
                  1
                ]
              ]
            ]
          },
          "pickup_and_delivery_pairs": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pickup And Delivery Pairs",
            "description": "dtype: int32, pairs >= 0. \n\n List of Pick-up and delivery index pairs from task locations.\nIn case we have the following pick-up and delivery locations, 2->1, 4->5, 3->4, then task locations would look something like, task_locations = [0, 2, 1, 4, 5, 3, 4] and pick-up and delivery pairs would be index of those locations in task location and would look like [[1, 2], [3, 4], [5, 6]], 1 is pickup index for location 2 and it should be delivered to location 1 which is at index 2.Example schema:  \n\n     [ \n\n         [pcikup_1_idx_to_task, drop_1_idx_to_task], \n\n         [pcikup_2_idx_to_task, drop_2_idx_to_task], \n\n     ]",
            "examples": [
              null
            ]
          },
          "task_time_windows": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "integer",
                    "maximum": 2147483647,
                    "minimum": 0
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Time Windows",
            "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time windows for each tasks.\nFor example the data would look as follows, \n \n\n     [ \n\n         [tsk_1_earliest, tsk_1_latest], \n\n         [tsk_2_earliest, tsk_2_latest] \n\n     ]",
            "examples": [
              [
                [
                  0,
                  5
                ],
                [
                  3,
                  9
                ]
              ]
            ]
          },
          "service_times": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "additionalProperties": {
                  "items": {
                    "type": "integer"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Times",
            "description": "dtype: int32, time >= 0. \n\n Service time for each task. Accepts a list of service times for all vehicles. In case of vehicle specific service times, accepts a dict with key as vehicle id and value as list of service times.Example schema: In case all vehicles have same service times,  \n\n     [tsk_1_srv_time, tsk_2_srv_time, tsk_3_srv_time] \n\n  \n\n In case, there are 2 types of vehicle types and each of them have different service times, \n\n     { \n\n         type-1: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time], \n\n         type-2: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time] \n\n     }",
            "examples": [
              [
                0,
                0
              ]
            ]
          },
          "prizes": {
            "anyOf": [
              {
                "items": {
                  "type": "number",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prizes",
            "description": "dtype: float32, prizes >= 0. \n\n List of values which signifies prizes that are collected for fulfilling each task. This can be used effectively in case solution is infeasible and need to drop few tasks to get feasible solution. Solver will prioritize for higher prize tasks ",
            "examples": [
              null
            ]
          },
          "order_vehicle_match": {
            "anyOf": [
              {
                "items": {
                  "properties": {
                    "order_id": {
                      "type": "integer",
                      "title": "Order Id",
                      "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicleOrder id as an integer",
                      "maximum": 2147483647,
                      "minimum": 0
                    },
                    "vehicle_ids": {
                      "items": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "type": "array",
                      "title": "Vehicle Ids",
                      "description": "dtype: int32, vehicle_id >= 0. \n\n Indices of the vehicles which can serve this particular order. \n"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "order_id",
                    "vehicle_ids"
                  ],
                  "title": "OrderVehicleMatch"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Order Vehicle Match",
            "description": "A list of order vehicle match, where the match would contain a order id and a list of vehicle ids that can serve this order.",
            "examples": [
              [
                {
                  "order_id": 0,
                  "vehicle_ids": [
                    0
                  ]
                },
                {
                  "order_id": 1,
                  "vehicle_ids": [
                    1
                  ]
                }
              ]
            ]
          },
          "mandatory_task_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "maximum": 2147483647,
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mandatory Task Ids",
            "description": "dtype: int32, mandatory_task_id >= 0. \n\n Note: This is only effective when used along with drop infeasible option. \n\n A list of task ids which are mandatory and solver would fail if these cannot be fulfilled.",
            "examples": [
              null
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "task_locations"
        ],
        "title": "TaskData"
      },
      "UpdateCostMatrices": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "items": {
                      "type": "number",
                      "minimum": 0
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
          },
          "cost_matrix": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "items": {
                      "type": "number",
                      "minimum": 0
                    },
                    "type": "array"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cost Matrix",
            "description": "This field is deprecated, please use the 'data' field instead",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdateCostMatrices"
      },
      "UpdateSolverSettingsConfig": {
        "properties": {
          "time_limit": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 2147483647,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Limit",
            "description": "SolverSettings time limit",
            "examples": [
              1
            ]
          },
          "objectives": {
            "anyOf": [
              {
                "properties": {
                  "cost": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Cost",
                    "description": "dtype: float32.  \n\n The weight assigned to minimizing the cost for a given solution, default value is 1",
                    "examples": [
                      1
                    ]
                  },
                  "travel_time": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Travel Time",
                    "description": "dtype: float32. \n\n The weight assigned to minimizing total travel time for a given solution (includes drive, service and wait time)",
                    "examples": [
                      0
                    ]
                  },
                  "variance_route_size": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Variance Route Size",
                    "description": "dtype: float32. \n\n The weight assigned to the variance in the number of orders served by each route.",
                    "examples": [
                      0
                    ]
                  },
                  "variance_route_service_time": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Variance Route Service Time",
                    "description": "dtype: float32. \n\n The weight assigned to the variance in the accumulated service times of each route",
                    "examples": [
                      0
                    ]
                  },
                  "prize": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Prize",
                    "description": "dtype: float32. \n\n The weight assigned to the prize in accumulated prizes for each job fulfilled.This will be negated from overall values accumulated with other objectives.For example, if cost accumulated is 10 and objective value for it is 1, and if the prize accumulated is 3 and objective is 2, then total cost would look something like this 10 x 1 - 3 x 2 = 4.",
                    "examples": [
                      0
                    ]
                  },
                  "vehicle_fixed_cost": {
                    "anyOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "title": "Vehicle Fixed Cost",
                    "description": "dtype: float32. \n\n The weight assigned to the accumulated fixed costs of each vehicle used in solution",
                    "examples": [
                      0
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "Objective"
              },
              {
                "type": "null"
              }
            ],
            "description": "Values provided dictate the linear combination of factors used to evaluate solution quality.Only prize will be negated, all others gets accumulated. That's why sometime you might come across negative value as solution cost."
          },
          "config_file": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config File",
            "description": "Dump configuration information in a given file as yaml",
            "examples": [
              null
            ]
          },
          "verbose_mode": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Verbose Mode",
            "description": "Displaying internal information during the solver execution.",
            "default": false
          },
          "error_logging": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Logging",
            "description": "Displaying constraint error information during the solver execution.",
            "default": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdateSolverSettingsConfig"
      },
      "UpdateWaypointGraphData": {
        "properties": {
          "waypoint_graph": {
            "anyOf": [
              {
                "additionalProperties": {
                  "properties": {
                    "edges": {
                      "items": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "type": "array",
                      "title": "Edges",
                      "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                    },
                    "offsets": {
                      "items": {
                        "type": "integer",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "type": "array",
                      "title": "Offsets",
                      "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                    },
                    "weights": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "number",
                            "minimum": 0
                          },
                          "type": "array"
                        },
                        {
                          "type": "null"
                        }
                      ],
                      "title": "Weights",
                      "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "edges",
                    "offsets"
                  ],
                  "title": "WaypointGraph"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Waypoint Graph"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "UpdateWaypointGraphData"
      },
      "VehicleData": {
        "properties": {
          "task_id": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Task Id",
            "description": "task_ids being assigned to vehicle along with depot and breaks",
            "default": []
          },
          "arrival_stamp": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Arrival Stamp",
            "description": "arrival stamps at each task locations",
            "default": []
          },
          "route": {
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": 0
            },
            "type": "array",
            "title": "Route",
            "description": "Route indices as per waypoint graph or cost matrix provided",
            "default": []
          },
          "type": {
            "items": {
              "type": "string",
              "enum": [
                "Depot",
                "Pickup",
                "Delivery",
                "Break",
                "w"
              ],
              "title": "LocationTypeEnum"
            },
            "type": "array",
            "title": "Type",
            "description": "Type of routing point, whether it is Depot, Waypoint - w \nDelivery, Break, Pickup \n",
            "default": []
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "VehicleData"
      },
      "VehicleOrderMatch": {
        "properties": {
          "vehicle_id": {
            "type": "integer",
            "title": "Vehicle Id",
            "description": "dtype: int32, vehicle_id >= 0. \n\n Vehicle id as an integer, and can serve all the order listed in order_ids.",
            "maximum": 2147483647,
            "minimum": 0
          },
          "order_ids": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Order Ids",
            "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicle"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "vehicle_id",
          "order_ids"
        ],
        "title": "VehicleOrderMatch"
      },
      "WaypointGraph": {
        "properties": {
          "edges": {
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": 0
            },
            "type": "array",
            "title": "Edges",
            "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
          },
          "offsets": {
            "items": {
              "type": "integer",
              "maximum": 2147483647,
              "minimum": 0
            },
            "type": "array",
            "title": "Offsets",
            "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
          },
          "weights": {
            "anyOf": [
              {
                "items": {
                  "type": "number",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weights",
            "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "edges",
          "offsets"
        ],
        "title": "WaypointGraph"
      },
      "cuoptData": {
        "properties": {
          "action": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "cuOpt_OptimizedRouting",
                  "cuOpt_RoutingValidator",
                  0
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Action",
            "description": "Action to be performed by the service, validator action just validates input against format and base rules.",
            "default": "cuOpt_OptimizedRouting"
          },
          "data": {
            "anyOf": [
              {
                "properties": {
                  "cost_waypoint_graph_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "waypoint_graph": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Edges",
                                      "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                                    },
                                    "offsets": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Offsets",
                                      "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                                    },
                                    "weights": {
                                      "anyOf": [
                                        {
                                          "items": {
                                            "type": "number",
                                            "minimum": 0
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ],
                                      "title": "Weights",
                                      "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "edges",
                                    "offsets"
                                  ],
                                  "title": "WaypointGraph"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Waypoint Graph"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "UpdateWaypointGraphData"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Waypoint graph with weights as cost to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
                    "default": {},
                    "examples": [
                      null
                    ]
                  },
                  "travel_time_waypoint_graph_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "waypoint_graph": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "properties": {
                                    "edges": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Edges",
                                      "description": "dtype: int32, edge >= 0. \n\n Vertices of all the directed edges."
                                    },
                                    "offsets": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Offsets",
                                      "description": "dtype: int32, offset >= 0. \n\n Offsets which provide number of edges from the source vertex signified by the index."
                                    },
                                    "weights": {
                                      "anyOf": [
                                        {
                                          "items": {
                                            "type": "number",
                                            "minimum": 0
                                          },
                                          "type": "array"
                                        },
                                        {
                                          "type": "null"
                                        }
                                      ],
                                      "title": "Weights",
                                      "description": "dtype: float32, weight >= 0. \n\n Weights of each edges."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "edges",
                                    "offsets"
                                  ],
                                  "title": "WaypointGraph"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Waypoint Graph"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "UpdateWaypointGraphData"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Waypoint graph with weights as time to travel from A to B \nand B to A. If there are different types of vehicles \nthey can be provided with key value pair \nwhere key is vehicle-type and value is the graph. Value of \nvehicle type should be within [0, 255]",
                    "default": {},
                    "examples": [
                      null
                    ]
                  },
                  "cost_matrix_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "data": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "items": {
                                    "items": {
                                      "type": "number",
                                      "minimum": 0
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Data",
                            "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                          },
                          "cost_matrix": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "items": {
                                    "items": {
                                      "type": "number",
                                      "minimum": 0
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Cost Matrix",
                            "description": "This field is deprecated, please use the 'data' field instead",
                            "deprecated": true
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "UpdateCostMatrices"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Sqaure matrix with cost to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]",
                    "default": {},
                    "examples": [
                      {
                        "cost_matrix": {
                          "1": [
                            [
                              0,
                              1,
                              1
                            ],
                            [
                              1,
                              0,
                              1
                            ],
                            [
                              1,
                              1,
                              0
                            ]
                          ],
                          "2": [
                            [
                              0,
                              1,
                              1
                            ],
                            [
                              1,
                              0,
                              1
                            ],
                            [
                              1,
                              2,
                              0
                            ]
                          ]
                        }
                      }
                    ]
                  },
                  "travel_time_matrix_data": {
                    "anyOf": [
                      {
                        "properties": {
                          "data": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "items": {
                                    "items": {
                                      "type": "number",
                                      "minimum": 0
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Data",
                            "description": "dtype : vehicle-type (uint8), cost (float32), cost >= 0.\n \n\n Sqaure matrix with cost to travel from A to B and B to A. \nIf there different types of vehicles which have different \ncost matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is cost matrix. Value of \nvehicle type should be within [0, 255]"
                          },
                          "cost_matrix": {
                            "anyOf": [
                              {
                                "additionalProperties": {
                                  "items": {
                                    "items": {
                                      "type": "number",
                                      "minimum": 0
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Cost Matrix",
                            "description": "This field is deprecated, please use the 'data' field instead",
                            "deprecated": true
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "UpdateCostMatrices"
                      },
                      {
                        "type": "null"
                      }
                    ],
                    "description": "Sqaure matrix with time to travel from A to B and B to A. \nIf there are different types of vehicles which have different \ntravel time matrices, they can be provided with key value pair \nwhere key is vehicle-type and value is time matrix. Value of \nvehicle type should be within [0, 255]",
                    "default": {},
                    "examples": [
                      {
                        "cost_matrix": {
                          "1": [
                            [
                              0,
                              1,
                              1
                            ],
                            [
                              1,
                              0,
                              1
                            ],
                            [
                              1,
                              1,
                              0
                            ]
                          ],
                          "2": [
                            [
                              0,
                              1,
                              1
                            ],
                            [
                              1,
                              0,
                              1
                            ],
                            [
                              1,
                              2,
                              0
                            ]
                          ]
                        }
                      }
                    ]
                  },
                  "fleet_data": {
                    "allOf": [
                      {
                        "properties": {
                          "vehicle_locations": {
                            "items": {
                              "items": {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              "type": "array"
                            },
                            "type": "array",
                            "title": "Vehicle Locations",
                            "description": "dtype: int32, vehicle_location >= 0. \n\n Start and end location of the vehicles in the given set of locations in WayPointGraph or CostMatrices.\nExample: For 2 vehicles,  \n\n     [ \n\n         [veh_1_start_loc, veh_1_end_loc], \n\n         [veh_2_start_loc, veh_2_end_loc] \n\n     ]",
                            "examples": [
                              [
                                [
                                  0,
                                  0
                                ],
                                [
                                  0,
                                  0
                                ]
                              ]
                            ]
                          },
                          "vehicle_ids": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Ids",
                            "description": "List of the vehicle ids or names provided as a string.",
                            "examples": [
                              [
                                "veh-1",
                                "veh-2"
                              ]
                            ]
                          },
                          "capacities": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Capacities",
                            "description": "dtype: int32, capacity >= 0. \n\n Note: For this release number of capacity dimensions are limited to 3. \n\n Lists of capacities of each vehicle.\nMultiple capacities can be added and each list will represent one kind of capacity. Order of kind of the capacities should match order of the demands.\nTotal capacity for each type should be sufficient to complete all demand of that type.Example: In case of two sets of capacities per vehicle with 3 vehicles,  \n\n     [ \n\n         [cap_1_veh_1, cap_1_veh_2, cap_1_veh_3], \n\n         [cap_2_veh_1, cap_2_veh_2, cap_2_veh_3] \n\n     ]",
                            "examples": [
                              [
                                [
                                  2,
                                  2
                                ],
                                [
                                  4,
                                  1
                                ]
                              ]
                            ]
                          },
                          "vehicle_time_windows": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Time Windows",
                            "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time window pairs for each vehicle,\nfor example the data would look as follows for 2 vehicles, \n \n\n     [ \n\n         [veh_1_earliest, veh_1_latest], \n\n         [veh_2_earliest, veh_2_latest] \n\n     ]",
                            "examples": [
                              [
                                [
                                  0,
                                  10
                                ],
                                [
                                  0,
                                  10
                                ]
                              ]
                            ]
                          },
                          "vehicle_break_time_windows": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "items": {
                                      "type": "integer",
                                      "maximum": 2147483647,
                                      "minimum": 0
                                    },
                                    "type": "array"
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Break Time Windows",
                            "description": "dtype: int32, time >= 0. \n\n Multiple break time windows can be added for each vehicle.Earliest and Latest break time window pairs for each vehicle,\nFor example, in case of 2 sets of breaks for each vehicle which translates to 2 dimensions of breaks,\n \n\n     [ \n\n         [[brk_1_veh_1_earliest, brk_1_veh_1_latest], [brk_1_veh_2_earliest, brk_1_veh_2_latest]] \n\n         [[brk_2_veh_1_earliest, brk_2_veh_1_latest], [brk_2_veh_2_earliest, brk_2_veh_2_latest]] \n\n     ] \n\n The break duration within this time window is provided through vehicle_break_durations.",
                            "examples": [
                              [
                                [
                                  [
                                    1,
                                    2
                                  ],
                                  [
                                    2,
                                    3
                                  ]
                                ]
                              ]
                            ]
                          },
                          "vehicle_break_durations": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Break Durations",
                            "description": "dtype: int32, time >= 0. \n\n Break duration for each vehicle. vehicle_break_time_windows should be provided to use this option.For example, in case of having 2 breaks for each vehicle,  \n\n     [ \n\n         [brk_1_veh_1_duration, brk_1_veh_2_duration], \n\n         [brk_2_veh_1_duration, brk_2_veh_2_duration], \n\n     ]",
                            "examples": [
                              [
                                [
                                  1,
                                  1
                                ]
                              ]
                            ]
                          },
                          "vehicle_break_locations": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "integer",
                                  "maximum": 2147483647,
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Break Locations",
                            "description": "dtype: int32, location >= 0. \n\n Break location where vehicles can take breaks. If not set, any location can be used for the break.",
                            "examples": [
                              [
                                0,
                                1
                              ]
                            ]
                          },
                          "vehicle_types": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "integer",
                                  "maximum": 255,
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Types",
                            "description": "dtype: uint8. \n\n Types of vehicles in the fleet given as positive integers.",
                            "examples": [
                              [
                                1,
                                2
                              ]
                            ]
                          },
                          "vehicle_order_match": {
                            "anyOf": [
                              {
                                "items": {
                                  "properties": {
                                    "vehicle_id": {
                                      "type": "integer",
                                      "title": "Vehicle Id",
                                      "description": "dtype: int32, vehicle_id >= 0. \n\n Vehicle id as an integer, and can serve all the order listed in order_ids.",
                                      "maximum": 2147483647,
                                      "minimum": 0
                                    },
                                    "order_ids": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Order Ids",
                                      "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicle"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "vehicle_id",
                                    "order_ids"
                                  ],
                                  "title": "VehicleOrderMatch"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Order Match",
                            "description": "A list of vehicle order match, where the match would contain a vehicle id and a list of orders that vehicle can serve.",
                            "examples": [
                              [
                                {
                                  "order_ids": [
                                    0
                                  ],
                                  "vehicle_id": 0
                                },
                                {
                                  "order_ids": [
                                    1
                                  ],
                                  "vehicle_id": 1
                                }
                              ]
                            ]
                          },
                          "skip_first_trips": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "boolean"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Skip First Trips",
                            "description": "Drop the cost of trip to first location for that vehicle.",
                            "examples": [
                              [
                                true,
                                false
                              ]
                            ]
                          },
                          "drop_return_trips": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "boolean"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Drop Return Trips",
                            "description": "Drop cost of return trip for each vehicle.",
                            "examples": [
                              [
                                true,
                                false
                              ]
                            ]
                          },
                          "min_vehicles": {
                            "anyOf": [
                              {
                                "type": "integer",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Min Vehicles",
                            "description": "dtype: int32, min_vehicles >= 1. \n\n Solution should consider minimum number of vehicles",
                            "examples": [
                              2
                            ]
                          },
                          "vehicle_max_costs": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "number",
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Max Costs",
                            "description": "dtype: float32, max_costs >= 0. \n\n Maximum cost a vehicle can incur and it is based on cost matrix/cost waypoint graph.",
                            "examples": [
                              [
                                7,
                                10
                              ]
                            ]
                          },
                          "vehicle_max_times": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "number",
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Max Times",
                            "description": "dtype: float32, max_time >= 0. \n\n Maximum time a vehicle can operate (includes drive, service and wait time), this is based on travel time matrix/travel time waypoint graph.",
                            "examples": [
                              [
                                7,
                                10
                              ]
                            ]
                          },
                          "vehicle_fixed_costs": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "number",
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Vehicle Fixed Costs",
                            "description": "dtype: float32, fixed_cost >= 0. \n\n Cost of each vehicle.This helps in routing where may be 2 vehicles with less cost is effective compared to 1 vehicle with huge cost. As example shows veh-0 (15) > veh-1 (5) + veh-2 (5)",
                            "examples": [
                              [
                                15,
                                5
                              ]
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "vehicle_locations"
                        ],
                        "title": "FleetData"
                      }
                    ],
                    "description": "All Fleet information"
                  },
                  "task_data": {
                    "allOf": [
                      {
                        "properties": {
                          "task_locations": {
                            "items": {
                              "type": "integer",
                              "maximum": 2147483647,
                              "minimum": 0
                            },
                            "type": "array",
                            "title": "Task Locations",
                            "description": "dtype: int32, location >= 0. \n\n Location where the task has been requested.",
                            "examples": [
                              [
                                1,
                                2
                              ]
                            ]
                          },
                          "task_ids": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Task Ids",
                            "description": "List of the task ids or names provided as a string.",
                            "examples": [
                              [
                                "Task-A",
                                "Task-B"
                              ]
                            ]
                          },
                          "demand": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Demand",
                            "description": "dtype: int32 \n\n Note: For this release number of demand dimensions are limited to 3. \n\n Lists of demands of each tasks.\nMultiple demands can be added and each list represents one kind of demand. Order of these demands should match the type of vehicle capacities provided.Example: In case of two sets of demands per vehicle with 3 vehicles,  \n\n     [ \n\n         [dem_1_tsk_1, dem_1_tsk_2, dem_1_tsk_3], \n\n         [dem_2_tsk_1, dem_2_tsk_2, dem_2_tsk_3] \n\n     ]",
                            "examples": [
                              [
                                [
                                  1,
                                  1
                                ],
                                [
                                  3,
                                  1
                                ]
                              ]
                            ]
                          },
                          "pickup_and_delivery_pairs": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Pickup And Delivery Pairs",
                            "description": "dtype: int32, pairs >= 0. \n\n List of Pick-up and delivery index pairs from task locations.\nIn case we have the following pick-up and delivery locations, 2->1, 4->5, 3->4, then task locations would look something like, task_locations = [0, 2, 1, 4, 5, 3, 4] and pick-up and delivery pairs would be index of those locations in task location and would look like [[1, 2], [3, 4], [5, 6]], 1 is pickup index for location 2 and it should be delivered to location 1 which is at index 2.Example schema:  \n\n     [ \n\n         [pcikup_1_idx_to_task, drop_1_idx_to_task], \n\n         [pcikup_2_idx_to_task, drop_2_idx_to_task], \n\n     ]",
                            "examples": [
                              null
                            ]
                          },
                          "task_time_windows": {
                            "anyOf": [
                              {
                                "items": {
                                  "items": {
                                    "type": "integer",
                                    "maximum": 2147483647,
                                    "minimum": 0
                                  },
                                  "type": "array"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Task Time Windows",
                            "description": "dtype: int32, time >= 0. \n\n Earliest and Latest time windows for each tasks.\nFor example the data would look as follows, \n \n\n     [ \n\n         [tsk_1_earliest, tsk_1_latest], \n\n         [tsk_2_earliest, tsk_2_latest] \n\n     ]",
                            "examples": [
                              [
                                [
                                  0,
                                  5
                                ],
                                [
                                  3,
                                  9
                                ]
                              ]
                            ]
                          },
                          "service_times": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "integer",
                                  "maximum": 2147483647,
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "additionalProperties": {
                                  "items": {
                                    "type": "integer"
                                  },
                                  "type": "array"
                                },
                                "type": "object"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Service Times",
                            "description": "dtype: int32, time >= 0. \n\n Service time for each task. Accepts a list of service times for all vehicles. In case of vehicle specific service times, accepts a dict with key as vehicle id and value as list of service times.Example schema: In case all vehicles have same service times,  \n\n     [tsk_1_srv_time, tsk_2_srv_time, tsk_3_srv_time] \n\n  \n\n In case, there are 2 types of vehicle types and each of them have different service times, \n\n     { \n\n         type-1: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time], \n\n         type-2: [tsk_1_srv_time, tsk_3_srv_time, tsk_3_srv_time] \n\n     }",
                            "examples": [
                              [
                                0,
                                0
                              ]
                            ]
                          },
                          "prizes": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "number",
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Prizes",
                            "description": "dtype: float32, prizes >= 0. \n\n List of values which signifies prizes that are collected for fulfilling each task. This can be used effectively in case solution is infeasible and need to drop few tasks to get feasible solution. Solver will prioritize for higher prize tasks ",
                            "examples": [
                              null
                            ]
                          },
                          "order_vehicle_match": {
                            "anyOf": [
                              {
                                "items": {
                                  "properties": {
                                    "order_id": {
                                      "type": "integer",
                                      "title": "Order Id",
                                      "description": "dtype: int32, order_id >= 0. \n\n Indices of orders which can be served by this particular vehicleOrder id as an integer",
                                      "maximum": 2147483647,
                                      "minimum": 0
                                    },
                                    "vehicle_ids": {
                                      "items": {
                                        "type": "integer",
                                        "maximum": 2147483647,
                                        "minimum": 0
                                      },
                                      "type": "array",
                                      "title": "Vehicle Ids",
                                      "description": "dtype: int32, vehicle_id >= 0. \n\n Indices of the vehicles which can serve this particular order. \n"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "order_id",
                                    "vehicle_ids"
                                  ],
                                  "title": "OrderVehicleMatch"
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Order Vehicle Match",
                            "description": "A list of order vehicle match, where the match would contain a order id and a list of vehicle ids that can serve this order.",
                            "examples": [
                              [
                                {
                                  "order_id": 0,
                                  "vehicle_ids": [
                                    0
                                  ]
                                },
                                {
                                  "order_id": 1,
                                  "vehicle_ids": [
                                    1
                                  ]
                                }
                              ]
                            ]
                          },
                          "mandatory_task_ids": {
                            "anyOf": [
                              {
                                "items": {
                                  "type": "integer",
                                  "maximum": 2147483647,
                                  "minimum": 0
                                },
                                "type": "array"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Mandatory Task Ids",
                            "description": "dtype: int32, mandatory_task_id >= 0. \n\n Note: This is only effective when used along with drop infeasible option. \n\n A list of task ids which are mandatory and solver would fail if these cannot be fulfilled.",
                            "examples": [
                              null
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "task_locations"
                        ],
                        "title": "TaskData"
                      }
                    ],
                    "description": "All Task information"
                  },
                  "solver_config": {
                    "anyOf": [
                      {
                        "properties": {
                          "time_limit": {
                            "anyOf": [
                              {
                                "type": "number",
                                "maximum": 2147483647,
                                "minimum": 0
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Time Limit",
                            "description": "SolverSettings time limit",
                            "examples": [
                              1
                            ]
                          },
                          "objectives": {
                            "anyOf": [
                              {
                                "properties": {
                                  "cost": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Cost",
                                    "description": "dtype: float32.  \n\n The weight assigned to minimizing the cost for a given solution, default value is 1",
                                    "examples": [
                                      1
                                    ]
                                  },
                                  "travel_time": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Travel Time",
                                    "description": "dtype: float32. \n\n The weight assigned to minimizing total travel time for a given solution (includes drive, service and wait time)",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "variance_route_size": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Variance Route Size",
                                    "description": "dtype: float32. \n\n The weight assigned to the variance in the number of orders served by each route.",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "variance_route_service_time": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Variance Route Service Time",
                                    "description": "dtype: float32. \n\n The weight assigned to the variance in the accumulated service times of each route",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "prize": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Prize",
                                    "description": "dtype: float32. \n\n The weight assigned to the prize in accumulated prizes for each job fulfilled.This will be negated from overall values accumulated with other objectives.For example, if cost accumulated is 10 and objective value for it is 1, and if the prize accumulated is 3 and objective is 2, then total cost would look something like this 10 x 1 - 3 x 2 = 4.",
                                    "examples": [
                                      0
                                    ]
                                  },
                                  "vehicle_fixed_cost": {
                                    "anyOf": [
                                      {
                                        "type": "number"
                                      },
                                      {
                                        "type": "null"
                                      }
                                    ],
                                    "title": "Vehicle Fixed Cost",
                                    "description": "dtype: float32. \n\n The weight assigned to the accumulated fixed costs of each vehicle used in solution",
                                    "examples": [
                                      0
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "title": "Objective"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "description": "Values provided dictate the linear combination of factors used to evaluate solution quality.Only prize will be negated, all others gets accumulated. That's why sometime you might come across negative value as solution cost."
                          },
                          "config_file": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Config File",
                            "description": "Dump configuration information in a given file as yaml",
                            "examples": [
                              null
                            ]
                          },
                          "verbose_mode": {
                            "anyOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Verbose Mode",
                            "description": "Displaying internal information during the solver execution.",
                            "default": false
                          },
                          "error_logging": {
                            "anyOf": [
                              {
                                "type": "boolean"
                              },
                              {
                                "type": "null"
                              }
                            ],
                            "title": "Error Logging",
                            "description": "Displaying constraint error information during the solver execution.",
                            "default": true
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "title": "UpdateSolverSettingsConfig"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "fleet_data",
                  "task_data"
                ],
                "title": "OptimizedRoutingData"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "The data that needs to be processed by the service. For detailed explanations of each field, please consult the following link: <a href=\"https://docs.nvidia.com/cuopt/service/latest/data-requirements.html\">data requirements</a> . To ensure best practices, please refer to: <a href=\"https://docs.nvidia.com/cuopt/service/latest/best-practices.html\">best practices</a>. For examples, you can find them at: <a href=\"https://github.com/NVIDIA/cuOpt-Resources/tree/branch-23.10/notebooks/routing/service\">notebooks</a>. If the size of the data exceeds 250KB, please utilize the large assets API to upload it to s3. In such cases, set the data as null and include the header NVCF-INPUT-ASSET-REFERENCES: $ASSET_ID in the POST request."
          },
          "parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "description": "unused/ignored but retained for compatibility"
          },
          "client_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Version",
            "description": "cuOpt client version. Set to 'custom' to skip version check.",
            "default": ""
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "data"
        ],
        "title": "cuoptData"
      }
    }
  }
}